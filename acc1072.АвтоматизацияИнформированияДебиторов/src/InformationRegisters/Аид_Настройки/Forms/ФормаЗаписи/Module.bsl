
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ИспользоватьТиповыеНастройкиСМС.Видимость = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	
	//можно отобрать параметры именно для конкретной орг-ции (на будущее)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	1 КАК Приоритет,
		|	Аид_Настройки.ПочтаДляЕмайл КАК ПочтаДляЕмайл,
		|	Аид_Настройки.ЛогинТелефония КАК ЛогинТелефония,
		|	Аид_Настройки.ПарольТелефония КАК ПарольТелефония,
		|	Аид_Настройки.СпособАвторизацииТелефония КАК СпособАвторизацииТелефония,
		|	Аид_Настройки.ЛогинДляОтправкиSMS КАК ЛогинДляОтправкиSMS,
		|	Аид_Настройки.ПарольДляОтправкиSMS КАК ПарольДляОтправкиSMS,
		|	Аид_Настройки.ПровайдерSMS КАК ПровайдерSMS,
		|	Аид_Настройки.ПровайдерТелефония КАК ПровайдерТелефония,
		|	Аид_Настройки.СпособАвторизацииSMS КАК СпособАвторизацииSMS,
		|	Аид_Настройки.ИмяОтправителяSMS КАК ИмяОтправителяSMS,
		|	Аид_Настройки.КлючБС КАК КлючБС
		|ИЗ
		|	РегистрСведений.Аид_Настройки КАК Аид_Настройки
		|ГДЕ
		|	Аид_Настройки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	2,
		|	Аид_Настройки.ПочтаДляЕмайл,
		|	Аид_Настройки.ЛогинТелефония,
		|	Аид_Настройки.ПарольТелефония,
		|	Аид_Настройки.СпособАвторизацииТелефония,
		|	Аид_Настройки.ЛогинДляОтправкиSMS,
		|	Аид_Настройки.ПарольДляОтправкиSMS,
		|	Аид_Настройки.ПровайдерSMS,
		|	Аид_Настройки.ПровайдерТелефония,
		|	Аид_Настройки.СпособАвторизацииSMS,
		|	Аид_Настройки.ИмяОтправителяSMS,
		|	Аид_Настройки.КлючБС
		|ИЗ
		|	РегистрСведений.Аид_Настройки КАК Аид_Настройки
		|ГДЕ
		|	Аид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", Запись.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	//телефония
	НастройкиПровайдераТелефония = Аид_ОтправкаГолосовойПочты.НастройкиПровайдера(Запись.ПровайдерТелефония);
	ЗаполнитьСпособыАвторизацииТелефония();
	УстановитьПоляАвторизацииТелефония();
	
	Если Не Элементы.ПарольТелефония.РежимПароля = Неопределено и Элементы.ПарольТелефония.РежимПароля Тогда
		Запись.ПарольТелефония = ?(ЗначениеЗаполнено(Запись.ПарольТелефония), УникальныйИдентификатор, "");
	КонецЕсли;
	
	//СМС
	НастройкиПровайдераSMS = Аид_ОтправкаSMS.НастройкиПровайдера(Запись.ПровайдерSMS);
//	ЗаполнитьСпособыАвторизации();
//	УстановитьПоляАвторизации();
	
	Если Не Элементы.ПарольДляОтправкиSMS.РежимПароля = Неопределено и Элементы.ПарольДляОтправкиSMS.РежимПароля Тогда
		Запись.ПарольДляОтправкиSMS = ?(ЗначениеЗаполнено(Запись.ПарольДляОтправкиSMS), УникальныйИдентификатор, "");
	КонецЕсли;
	
	//Определяем список выбора для часовых поясов
	Элементы.ЧасовойПояс.СписокВыбора.Очистить();
	СписокЧП = СписокВыбораЧасовыхПоясов();
	Для каждого ЭлемЧП из СписокЧП Цикл
		Элементы.ЧасовойПояс.СписокВыбора.Добавить(ЭлемЧП.Значение, ЭлемЧП.Представление);
	КонецЦикла;
	
	Элементы.ВключатьЗадолженность.Видимость = истина;
	Если Не ЗначениеЗаполнено(Запись.ВключатьЗадолженность) Тогда 
		Запись.ВключатьЗадолженность = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыбораЧасовыхПоясов()
	
	Возврат Аид_ОбщегоНазначенияПереопределяемый.ПолучитьСписокЧасовыхПоясов();
	
КонецФункции

&НаКлиенте
Процедура ШаблоныСообщений(Команда)
	
	ОткрытьФорму("Справочник.Аид_ШаблоныСообщений.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗадания(Команда)
	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаФормированияСобытий(Команда)
	
	ОткрытьФорму("РегистрСведений.Аид_ПравилаФормированияСобытий.Форма.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестПодключенияТелефонии(Команда)
	
	ПараметрыОтправки = новый Структура("Организаци", Запись.Организация);
	ОткрытьФорму("ОбщаяФорма.Аид_ОтправкаГП", ПараметрыОтправки, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестПодключенияСМС(Команда)
	
	ПараметрыОтправки = новый Структура("Организаци, ИмяОтправителя", Запись.Организация, Запись.ИмяОтправителяSMS);
	ОткрытьФорму("ОбщаяФорма.Аид_ОтправкаSMS", ПараметрыОтправки, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестПодключенияПочты(Команда)
	Если Запись.ПочтаДляЕмайл.Пустая() тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите учетную запись для электронной почты!",, "ПочтаДляЕмайл");
	иначе	
		ПараметрыФормы = Новый Структура("УчетнаяЗапись", Запись.ПочтаДляЕмайл);
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПроверкаНастроекУчетнойЗаписи", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТиповыеНастройкиСМС(Команда)
	
	ИспользоватьТиповыеНастройкиСМСНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьТиповыеНастройкиСМСНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиSMS = ОтправкаSMS.НастройкиОтправкиSMS();
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиПровайдераSMS = ОтправкаSMS.НастройкиПровайдера(НастройкиОтправкиSMS.Провайдер);
	ЗаполнитьСпособыАвторизации();
	
	Если НастройкиОтправкиSMS.Свойство("СпособАвторизации")
		И ЗначениеЗаполнено(НастройкиОтправкиSMS.СпособАвторизации)
		И Элементы.СпособАвторизации.СписокВыбора.НайтиПоЗначению(НастройкиОтправкиSMS.СпособАвторизации) <> Неопределено Тогда
		
		Запись.СпособАвторизацииSMS = НастройкиОтправкиSMS.СпособАвторизации;
	КонецЕсли;
	
	УстановитьПоляАвторизации();
	
	Запись.ЛогинДляОтправкиSMS = НастройкиОтправкиSMS.Логин;
	Запись.ИмяОтправителяSMS = НастройкиОтправкиSMS.ИмяОтправителя;
	Запись.ПарольДляОтправкиSMS = НастройкиОтправкиSMS.Пароль;
	
	Если Элементы.Пароль.РежимПароля Тогда
		Запись.ПарольДляОтправкиSMS = ?(ЗначениеЗаполнено(НастройкиОтправкиSMS.Пароль), ЭтотОбъект.УникальныйИдентификатор, "");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьПоляАвторизации()
	
	ПоляАвторизации = ЭтаФорма.НастройкиПровайдераSMS.СпособыАвторизации[Запись.СпособАвторизацииSMS];
	
	Для Каждого ИмяПоля Из СтрРазделить("Логин,Пароль", ",") Цикл
		мИмяПоля = ИмяПоля + "ДляОтправкиSMS";
		Поле = ПоляАвторизации.НайтиПоЗначению(ИмяПоля);
		Если Поле <> Неопределено Тогда
			ЭтаФорма.Элементы[мИмяПоля].Заголовок = Поле.Представление;
			ЭтаФорма.Элементы[мИмяПоля].Подсказка = Поле.Представление;
			ЭтаФорма.Элементы[мИмяПоля].Видимость = Истина;
		иначе
			ЭтаФорма.Элементы[мИмяПоля].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособыАвторизации()
	
	Элементы.СпособАвторизации.СписокВыбора.Очистить();
	
	СпособыАвторизацииПоУмолчанию = Новый СписокЗначений;
	СпособыАвторизацииПоУмолчанию.Добавить("ПоКлючу", НСтр("ru = 'По ключу (рекомендуется)'"));
	СпособыАвторизацииПоУмолчанию.Добавить("ПоЛогинуИПаролю", НСтр("ru = 'По логину и паролю'"));
	
	Для Каждого Элемент Из СпособыАвторизацииПоУмолчанию Цикл
		Если НастройкиПровайдераSMS.СпособыАвторизации.Свойство(Элемент.Значение) Тогда
			Элементы.СпособАвторизации.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Запись.СпособАвторизацииSMS = ЭтаФорма.Элементы.СпособАвторизации.СписокВыбора[0].Значение;
	ЭтаФорма.Элементы.СпособАвторизации.Видимость = ЭтаФорма.Элементы.СпособАвторизации.СписокВыбора.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровайдерSMSПриИзменении(Элемент)
	
	НастройкиПровайдераSMS = НастройкиПровайдера(Запись.ПровайдерSMS);
	
	ЗаполнитьСпособыАвторизации();
	УстановитьПоляАвторизации();
	
	Запись.ЛогинДляОтправкиSMS = "";
	Запись.ПарольДляОтправкиSMS = "";
	Запись.ИмяОтправителяSMS = "";
	
	УстановитьТекстИнструкцииПоПодключениюУслугиСМС();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАвторизацииПриИзменении(Элемент)
	
	Запись.ЛогинДляОтправкиSMS = "";
	Запись.ПарольДляОтправкиSMS = "";
	
	УстановитьПоляАвторизации();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПровайдера(Провайдер)
	
	Возврат Аид_ОтправкаSMS.НастройкиПровайдера(Провайдер);
	
КонецФункции

&НаКлиенте
Функция АдресОписанияУслугиВИнтернете()
	
	АдресВИнтернете = НастройкиПровайдераSMS.АдресОписанияУслугиВИнтернете;
	ОтправкаSMSКлиентПереопределяемый.ПриПолученииАдресаПровайдераВИнтернете(Запись.ПровайдерSMS, АдресВИнтернете);
	Возврат АдресВИнтернете;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекстИнструкцииПоПодключениюУслугиСМС()
	
	ШаблонИнструкции = НСтр("ru = 'Для подключения услуги отправки SMS необходимо заключить договор с провайдером <a href = ""%1"">%2</a>.
	|Имя отправителя следует заполнять только в случае, если оно предусмотрено договором.
	|По вопросам оплаты услуги и проблемам авторизации следует обращаться к провайдеру услуги.'");
	
	Элементы.ИнструкцияПоПодключениюУслуги.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнструкции, АдресОписанияУслугиВИнтернете(), Запись.ПровайдерSMS));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТекстИнструкцииПоПодключениюУслугиСМС();
	УстановитьТекстИнструкцииПоПодключениюУслугиТелефонии();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПровайдераТелефония(Провайдер)
	
	Возврат Аид_ОтправкаГолосовойПочты.НастройкиПровайдера(Провайдер);
	
КонецФункции

&НаКлиенте
Процедура ПровайдерТелефонииПриИзменении(Элемент)
	
	НастройкиПровайдераТелефония = НастройкиПровайдераТелефония(Запись.ПровайдерТелефония);
	
	ЗаполнитьСпособыАвторизацииТелефония();
	УстановитьПоляАвторизацииТелефония();
	
	Запись.ЛогинТелефония = "";
	Запись.ПарольТелефония = "";
	
	УстановитьТекстИнструкцииПоПодключениюУслугиТелефонии();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособыАвторизацииТелефония()
	
	//Элементы.СпособАвторизацииТелефония.СписокВыбора.Очистить();
	//
	//СпособыАвторизацииПоУмолчанию = Новый СписокЗначений;
	//СпособыАвторизацииПоУмолчанию.Добавить("ПоКлючу", НСтр("ru = 'По ключу (рекомендуется)'"));
	//СпособыАвторизацииПоУмолчанию.Добавить("ПоЛогинуИПаролю", НСтр("ru = 'По логину и паролю'"));
	//
	//Для Каждого Элемент Из СпособыАвторизацииПоУмолчанию Цикл
	//	Если НастройкиПровайдераТелефония.СпособыАвторизации.Свойство(Элемент.Значение) Тогда
	//		Элементы.СпособАвторизацииТелефония.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Запись.СпособАвторизацииТелефония = Элементы.СпособАвторизацииТелефония.СписокВыбора[0].Значение;
	//Элементы.СпособАвторизацииТелефония.Видимость = Элементы.СпособАвторизацииТелефония.СписокВыбора.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоляАвторизацииТелефония()
	
	//ПоляАвторизации = НастройкиПровайдераТелефония.СпособыАвторизации[Запись.СпособАвторизацииТелефония];
	//
	//Для Каждого ИмяПоля Из СтрРазделить("Логин,Пароль", ",") Цикл
	//	мИмяПоля = ИмяПоля + "Телефония";
	//	Поле = ПоляАвторизации.НайтиПоЗначению(ИмяПоля);
	//	Если Поле <> Неопределено Тогда
	//		Элементы[мИмяПоля].Заголовок = Поле.Представление;
	//		Элементы[мИмяПоля].Подсказка = Поле.Представление;
	//		Элементы[мИмяПоля].Видимость = Истина;
	//	иначе
	//		Элементы[мИмяПоля].Видимость = Ложь;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстИнструкцииПоПодключениюУслугиТелефонии()
	
	ШаблонИнструкции = НСтр("ru = 'Для подключения услуги отправки голосовых сообщений необходимо заключить договор с провайдером <a href = ""%1"">%2</a>.
	|Имя отправителя следует заполнять только в случае, если оно предусмотрено договором.
	|По вопросам оплаты услуги и проблемам авторизации следует обращаться к провайдеру услуги.'");
	
	Элементы.ИнструкцияПоПодключениюУслугиТелефония.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнструкции, АдресОписанияУслугиВИнтернете(), Запись.ПровайдерТелефония));
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАвторизацииТелефонияПриИзменении(Элемент)
	
	Запись.ЛогинТелефония = "";
	Запись.ПарольТелефония = "";
	
	УстановитьПоляАвторизацииТелефония();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСтатусыСообщенийПриИзменении(Элемент)
	Элементы.ИнтервалОбновления.Доступность = Запись.ОбновлятьСтатусыСообщений;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если  Аид_ОбщегоНазначенияПереопределяемый.НастройкаРегЗаданийВыполнена() Тогда
		Аид_ОбщегоНазначенияПереопределяемый.СоздатьРегламентноеЗаданиеЗаполненияЗадолженности(Истина);
		Аид_ОбщегоНазначенияПереопределяемый.СоздатьРегламентноеЗаданиеОбновленияСтатусов(Истина);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Если Запись.ПровайдерТелефония = ПредопределенноеЗначение("Перечисление.удз_ПровайдерыТелефонии.Женский") Тогда
	//	Если Запись.ПереводВызова Тогда
	//		Запись.ПарольТелефония = Запись.ТокенЖенскийПеревод;
	//	иначе
	//		Запись.ПарольТелефония = Запись.ТокенЖенский;
	//	КонецЕсли;
	//иначе
	//	Если Запись.ПереводВызова Тогда
	//		Запись.ПарольТелефония = Запись.ТокенМужскойПеревод;
	//	иначе
	//		Запись.ПарольТелефония = Запись.ТокенМужской;  
	//	КонецЕсли;			
	//КонецЕсли;
	Запись.ПарольТелефония = "";
	
	// Проверяем на корректность заполненные данные.
	Если Запись.ВремяОкончанияОбновленияСтатусов <= Запись.ВремяНачалаОбновленияСтатусов Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Некорректно заполнено время обновления статусов.");
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоваяАрхитектура()
	Возврат ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
КонецФункции









	

