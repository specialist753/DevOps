
//Процедура удз_СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
//	
//	РезультатФормированияОтчета = удз_ПодготовитьОтчет(ПараметрыОтчета);
//	
//	ПоместитьВоВременноеХранилище(РезультатФормированияОтчета, АдресХранилища);

//КонецПроцедуры


//Функция удз_ПодготовитьОтчет(ПараметрыОтчета) Экспорт 
//	Перем ДанныеРасшифровкиОбъект;	
//	
//	Результат = Новый ТаблицаЗначений;
//	
//	РезультатФормированияОтчета = Новый Структура;
//	РезультатФормированияОтчета.Вставить("Выполнено",         Истина);
//	РезультатФормированияОтчета.Вставить("Результат",         Результат);
//	РезультатФормированияОтчета.Вставить("ДанныеРасшифровки", ПараметрыОтчета.ДанныеРасшифровки);
//	РезультатФормированияОтчета.Вставить("КонтрольноеСоотношениеИтоговВыполняется", Истина);
//	РезультатФормированияОтчета.Вставить("КраткоеПредставлениеОшибки",   "");
//	РезультатФормированияОтчета.Вставить("ПодробноеПредставлениеОшибки", "");
//	
//	МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
//	
//	ПараметрыИсполненияОтчета = ПолучитьПараметрыИсполненияОтчета(ПараметрыОтчета, МенеджерОтчета);
//	
//	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
//		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
//			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
//		КонецЕсли;
//	Иначе
//		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
//	КонецЕсли;
//	
//	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
//	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
//	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
//	
//	// Определим необходимость вывода заголовка.
//	ВыводитьРаздел = Ложь;
//	Если ПараметрыОтчета.Свойство("ВыводитьЗаголовок", ВыводитьРаздел) Тогда
//	ИначеЕсли КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок", ВыводитьРаздел) Тогда
//	Иначе
//		ВыводитьРаздел = Истина;
//	КонецЕсли;
//	Если ВыводитьРаздел Тогда
//		// Если нет прямого указания не выводить, то выводим заголовок.
//		Если ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка Тогда
//			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат);
//		Иначе
//			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
//		КонецЕсли;

//	КонецЕсли;
//	
//	Если ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета Тогда
//		МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
//	КонецЕсли;
//	
//	КомпоновщикНастроек.Восстановить();
//	
//	НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
//	
//	УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
//	
//	// Сгенерируем макет компоновки данных при помощи компоновщика макета
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

//	Попытка
//		
//		// В качестве схемы компоновки будет выступать схема самого отчета.
//		// В качестве настроек отчета - текущие настройки отчета.
//		// Данные расшифровки будем помещать в ДанныеРасшифровки.
//		//Если ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки Тогда 
//		//	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект,,тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
//		//Иначе
//		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета,,,тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
//		//КонецЕсли;
//		
//		// Вызываем событие отчета
//		Если ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета Тогда
//			МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
//		КонецЕсли;
//		
//		//Если ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных Тогда
//		ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
//		РезультатФормированияОтчета.Вставить("ВнешниеНаборыДанных",ВнешниеНаборыДанных);
//		////КонецЕсли;
//		//Если ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим Тогда
//		//	УстановитьПривилегированныйРежим(Истина);
//		//КонецЕсли;
//		//
//		//Запрос = Новый Запрос;
//		//Запрос.Текст = МакетКомпоновки.НаборыДанных.ОсновнойНабор.Запрос;
//		//Для каждого Парам Из МакетКомпоновки.ЗначенияПараметров Цикл
//		//	Запрос.УстановитьПараметр(Парам.Имя,Парам.Значение);
//		//КонецЦикла;
//		//
//		//РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//		//
//		//// Отключаем привилегированный режим если он использовался
//		//Если ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим Тогда
//		//	УстановитьПривилегированныйРежим(Ложь);
//		//КонецЕсли;
//		
//	Исключение

//		ИнформацияОбОшибке = ИнформацияОбОшибке();
//		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
//			
//		// Записываем в журнал регистрации
//		Событие = НСтр("ru = 'Ошибка формирования отчета'", ОбщегоНазначения.КодОсновногоЯзыка());
//		ЗаписьЖурналаРегистрации(
//			Событие,
//			УровеньЖурналаРегистрации.Ошибка,
//			Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета],
//			, // Данных нет
//			ПодробноеПредставлениеОшибки);
//		
//		// Информируем пользователя файловой версии
//		Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
//			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
//		КонецЦикла;
//		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отчет не сформирован! %1'"), ИнформацияОбОшибке.Описание);
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
//		
//		РезультатФормированияОтчета.Выполнено                    = Ложь;
//		РезультатФормированияОтчета.КраткоеПредставлениеОшибки   = ТекстСообщения;
//		РезультатФормированияОтчета.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки;
//		
//		Возврат РезультатФормированияОтчета;

//	КонецПопытки;

//	// Определим необходимость вывода подвала.
//	Если ПараметрыОтчета.Свойство("ВыводитьПодвал", ВыводитьРаздел) Тогда
//	ИначеЕсли КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал", ВыводитьРаздел) Тогда
//	Иначе
//		ВыводитьРаздел = Истина;
//	КонецЕсли;
//	Если ВыводитьРаздел Тогда
//		// Если нет прямого запрета выводить подвал, то выводим его.
//		Если ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала Тогда 
//			МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Результат);
//		Иначе
//			ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
//		КонецЕсли;

//	КонецЕсли;
//	
//	//Если ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата Тогда
//	//	МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
//	//Иначе
//	//	ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
//	//КонецЕсли;

//	//Если ПараметрыИсполненияОтчета.ПроверкаИтогов
//	//   И ПараметрыОтчета.НастройкиКомпоновкиДанных.ДополнительныеСвойства.Свойство("КонтрольноеСоотношениеИтоговВыполняется") Тогда
//	//	
//	//	РезультатФормированияОтчета.КонтрольноеСоотношениеИтоговВыполняется =
//	//		ПараметрыОтчета.НастройкиКомпоновкиДанных.ДополнительныеСвойства.КонтрольноеСоотношениеИтоговВыполняется;
//	//		
//	//КонецЕсли;

//	Возврат РезультатФормированияОтчета;
//	

//КонецФункции
