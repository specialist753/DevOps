Процедура ВыполнитьКоманду() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ДатаОтчета = КонецДня(ТекущаяДата());
	
	ДатаАктуальностиРасчетов = ПолучитьДатуАктуальностиДЗ();
	ДатаАктуальности = ДатаАктуальностиРасчетов;
	
	Если Не ДатаАктуальности = Неопределено и ДатаАктуальности < ДатаОтчета Тогда 
		ТекстПредупреждения = "Внимание!! Распределение расчетов по клиентам выполнено до %ДатаАктуальности%. Данные могут быть не корректны.";
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ДатаАктуальности%", Формат(ДатаАктуальности, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
	КонецЕсли;
	
	
	
	//из отчета "ДебиторскаяЗадолженность"
	Результат = СрокиОплатыДокументов.ПросроченнаяЗадолженностьПокупателей(
									Справочники.Организации.ПустаяСсылка(),
									КонецДня(ДатаОтчета),
									Ложь);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = АИД_ОбщегоНазначенияПереопределяемый.ПолучитьТекстЗапросаДебиторскойЗадолженности(Неопределено);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ТаблицаЗадолженностей.Контрагент В (&Контрагент)","");
	
	ПараметрыДЗ = ПолучитьПараметрыДебиторскойЗадолженностиПоУмолчанию();
	Запрос.УстановитьПараметр("ПраваяГраницаОтчета",                  КонецДня((ДатаОтчета + 4*ПараметрыДЗ.Сутки)));
	Запрос.УстановитьПараметр("ДатаОтчета",                           ДатаОтчета);
	Запрос.УстановитьПараметр("ДатаОстатков",                         Новый Граница(КонецДня(КонецДня(ДатаОтчета) + 1), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Валюта",                               ПараметрыДЗ.Валюта);
	Запрос.УстановитьПараметр("ДанныеОтчета",                         ПараметрыДЗ.ДанныеОтчета);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуКонтрагентов", Ложь);
	Запрос.УстановитьПараметр("ВсеДолги",                             ПараметрыДЗ.ВсеДолги);
	Запрос.УстановитьПараметр("СтрокаДолгНеПросрочен",                "0 дней");
	Запрос.УстановитьПараметр("ВключатьЗадолженность", 				  ПолучитьНастройкуЗадолженности());
	Запрос.УстановитьПараметр("ДатаОтчетаГраница", 				      КонецДня((ДатаОтчета + 4*ПараметрыДЗ.Сутки)));
	Запрос.УстановитьПараметр("ДатаАктуальностиДЗ", 				  ДатаАктуальности);
	Запрос.УстановитьПараметр("СтрокаСостояниеВзаиморасчетов", 		  НСтр("ru='Состояние взаиморасчетов'"));
	запрос.УстановитьПараметр("ОтсрочкаПоУмолчанию",				  Константы.СрокОплатыПокупателей.Получить());
	//запрос.УстановитьПараметр("Контрагент",				  Справочники.Контрагенты.НайтиПоНаименованию("Магазин №23"));
	МассивОрганизаций = ПолучитьОрганизацииДЗ();
	Запрос.УстановитьПараметр("Организации", 					  МассивОрганизаций);
	Запрос.УстановитьПараметр("Тз",Результат );
	
	
	Если Не ПараметрыДЗ.Свойство("ВариантКлассификации") Тогда
		Запрос.УстановитьПараметр("ВариантКлассификацииЗадолженности",    Справочники.АИД_ВариантыКлассификацииЗадолженности.ПустаяСсылка());
		Запрос.УстановитьПараметр("Календарь",                            Справочники.ПроизводственныеКалендари.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ВариантКлассификацииЗадолженности",    ПараметрыДЗ.ВариантКлассификации);
		Запрос.УстановитьПараметр("Календарь",                            ПараметрыДЗ.Календарь);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	лпТаблица = Результат.Скопировать();
	лпТаблица.Очистить();
	лпТаблица.Колонки.Добавить("ДетализироватьПоОбъектамРасчетов", Новый ОписаниеТипов("Булево"));
	лпТаблица.Колонки.Добавить("КлючРегламентногоЗадания", Новый ОписаниеТипов("УникальныйИдентификатор"));
	лпТаблица.Колонки.Добавить("КлючПравила", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ДеньНеделиОтчета = ДеньНедели(ДатаОтчета + 1);
	Для каждого СтрокаРезультат из Результат Цикл
		Если СтрокаРезультат.ИсключенИзРассылки Тогда
			Продолжить;
		КонецЕсли;
		
		//Кол-во дней задолженности расчитаны на следующий день.
		//Для ТекДатаПлюс1 это будет на 1 сутки больше
		Если ПараметрыДЗ.ВсеДолги и СтрокаРезультат.КоличествоДней = 0 тогда
			КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДнейДоПлатежа;
			Сумма                       = СтрокаРезультат.ДолгКлиента;  
		иначе	
			КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДней;
			Сумма                       = СтрокаРезультат.ДолгКлиентаПросрочено;   
		КонецЕсли;
		стррДанные = АИД_ОбщегоНазначенияПереопределяемый.ПолучитьДанныеДляФормированияСобытияАИД(СтрокаРезультат.ВидДоговора,
		СтрокаРезультат.СтатусКонтрагента,
		СтрокаРезультат.Контрагент,
		СтрокаРезультат.ЗаказКлиента,
		ДеньНеделиОтчета,
		//КоличествоДнейЗадолженности + 1,Сумма);
		10000,Сумма);
		
		Для Каждого Стр Из стррДанные Цикл 
			Если ЗначениеЗаполнено(Стр.КлючРегламентногоЗадания) Тогда
				
				НоваяСтр = лпТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр,СтрокаРезультат);
				НоваяСтр.ДетализироватьПоОбъектамРасчетов = Стр.ДетализироватьПоОбъектамРасчетов;
				НоваяСтр.КлючРегламентногоЗадания = Стр.КлючРегламентногоЗадания;
				НоваяСтр.КлючПравила = Стр.КлючПравила;
				//НоваяСтр.Сумма = Сумма;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Истина);
	лпТаблОбъектов = лпТаблица.Скопировать(Отбор);	
	
	Для Каждого СтрокаРезультат Из лпТаблОбъектов Цикл 
		
		лпКоличествоДней = КоличесвтоДней(СтрокаРезультат.КлючПравила);
		Если СтрокаРезультат.КоличествоДней >= лпКоличествоДней Тогда 
			
			Телефон = "";
			Почта = "";
			Если ЗначениеЗаполнено(СтрокаРезультат.КонтактноеЛицо) тогда
				КонтактноеЛицо = СтрокаРезультат.КонтактноеЛицо;
			иначе
				//КонтактноеЛицо = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(СтрокаРезультат.Контрагент); Руслан закомментировал 21.12.21
				КонтактноеЛицо = Аид_ПолучитьКонтактноеЛицоПартнера(СтрокаРезультат.Контрагент);  //Руслан 21.12.21
				
				
				СтрокаРезультат.КонтактноеЛицо = КонтактноеЛицо;
			КонецЕсли;
			Если ЗначениеЗаполнено(КонтактноеЛицо) тогда
				стррДанныеКИ = ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо);
				Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
				Почта   = стррДанныеКИ.Почта;
				// если не удалось определить контактное лицо - получаем телефон и почту партнера
			Иначе
				стррДанныеКИ = ПолучитьДанныеКИКонтрагента(СтрокаРезультат.Контрагент);
				Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
				Почта   = стррДанныеКИ.Почта;
			КонецЕсли;
			
			НоваяЗапись = РегистрыСведений.АИД_СписокСообщений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРезультат);
			НоваяЗапись.ДатаСобытия = ДатаОтчета + 1;
			НоваяЗапись.КлючРегламентногоЗадания = СтрокаРезультат.КлючРегламентногоЗадания;
			НоваяЗапись.КлючПравила = СтрокаРезультат.КлючПравила;
			НоваяЗапись.КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДней; 
			НоваяЗапись.Телефон = Телефон;
			НоваяЗапись.Почта = Почта;
			НоваяЗапись.ОбъектРасчетов = СтрокаРезультат.ЗаказКлиента;
			НоваяЗапись.Записать();
		КонецЕсли;
	КонецЦикла;
	//	
	Отбор = Новый Структура;
	Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Ложь);
	лпТабл = лпТаблица.Скопировать(Отбор);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Табл.Организация КАК Организация,
	|	Табл.Контрагент КАК Контрагент,
	|	Табл.КонтактноеЛицо КАК КонтактноеЛицо,
	|	Табл.Валюта КАК Валюта,
	|	Табл.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	|	Табл.НомерИнтервала КАК НомерИнтервала,
	|	Табл.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	Табл.ДолгКлиента КАК ДолгКлиента,
	|	Табл.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
	|	Табл.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	|	Табл.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	Табл.ДатаПлатежа КАК ДатаПлатежа,
	|	Табл.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	Табл.КлючПравила КАК КлючПравила,
	|	Табл.КоличествоДней КАК КоличествоДнейЗадолженности
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Табл КАК Табл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Организация КАК Организация,
	|	ВТ.Контрагент КАК Контрагент,
	|	ВТ.КонтактноеЛицо КАК КонтактноеЛицо,
//	|	ВТ.Валюта КАК Валюта,
	|	ВТ.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	|	ВТ.НомерИнтервала КАК НомерИнтервала,
	|	ВТ.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	СУММА(ВТ.ДолгКлиента) КАК ДолгКлиента,
	|	СУММА(ВТ.ДолгКлиентаВВалютеОтчета) КАК ДолгКлиентаВВалютеОтчета,
	|	СУММА(ВТ.ДолгКлиентаПросрочено) КАК ДолгКлиентаПросрочено,
	|	СУММА(ВТ.ДолгКлиентаПросроченоВВалютеОтчета) КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	МИНИМУМ(ВТ.ДатаПлатежа) КАК ДатаПлатежа,
	|	ВТ.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	ВТ.КлючПравила КАК КлючПравила,
	|	МИНИМУМ(ВТ.КоличествоДнейЗадолженности) КАК КоличествоДнейЗадолженности
//	|	Сумма(ВТ.КоличествоДнейЗадолженности) КАК КоличествоДнейЗадолженности
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.КонтактноеЛицо,
//  |	ВТ.Валюта,
	|	ВТ.ИнтервалЗадолженности,
	|	ВТ.НомерИнтервала,
	|	ВТ.НижняяГраницаИнтервала,
	|	ВТ.КлючРегламентногоЗадания,
	|	ВТ.КлючПравила,
	|	ВТ.Организация,
	|	ВТ.Контрагент";
	Запрос.УстановитьПараметр("Табл",лпТабл);
	
	лпТаблИтог = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого СтрокаРезультат Из лпТаблИтог Цикл 
		лпКоличествоДней = КоличесвтоДней(СтрокаРезультат.КлючПравила);
		Если СтрокаРезультат.КоличествоДнейЗадолженности >= лпКоличествоДней Тогда 

			Если НужноОтправлятьСообщениеКонтрагенту(СтрокаРезультат.Контрагент,,СтрокаРезультат.КлючПравила,СтрокаРезультат.ДолгКлиента) Тогда 
				Телефон = "";
				Почта = "";
				Если ЗначениеЗаполнено(СтрокаРезультат.КонтактноеЛицо) тогда
					КонтактноеЛицо = СтрокаРезультат.КонтактноеЛицо;
				иначе
					//КонтактноеЛицо = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(СтрокаРезультат.Контрагент); Аид_ПолучитьКонтактноеЛицоПартнера
					КонтактноеЛицо = Аид_ПолучитьКонтактноеЛицоПартнера(СтрокаРезультат.Контрагент); 
					
					СтрокаРезультат.КонтактноеЛицо = КонтактноеЛицо;
				КонецЕсли;
				Если ЗначениеЗаполнено(КонтактноеЛицо) тогда
					стррДанныеКИ = ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо);
					Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
					Почта   = стррДанныеКИ.Почта;
					// если не удалось определить контактное лицо - получаем телефон и почту партнера
				Иначе
					стррДанныеКИ = ПолучитьДанныеКИКонтрагента(СтрокаРезультат.Контрагент);
					Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
					Почта   = стррДанныеКИ.Почта;
				КонецЕсли;
				
				// Добавляем запись в регистр.
				НоваяЗапись = РегистрыСведений.АИД_СписокСообщений.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРезультат);
				НоваяЗапись.ДатаСобытия = ДатаОтчета + 1;
				НоваяЗапись.КлючРегламентногоЗадания = СтрокаРезультат.КлючРегламентногоЗадания;
				НоваяЗапись.КлючПравила = СтрокаРезультат.КлючПравила;
				НоваяЗапись.КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДнейЗадолженности; 
				НоваяЗапись.Телефон = Телефон;
				НоваяЗапись.Почта = Почта;
				НоваяЗапись.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				НоваяЗапись.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	//КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры


функция КоличесвтоДней(лпКлючПравила)
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ПравилаФормированияСобытий.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности
	               |ИЗ
	               |	РегистрСведений.АИД_ПравилаФормированияСобытий КАК АИД_ПравилаФормированияСобытий
	               |ГДЕ
	               |	АИД_ПравилаФормированияСобытий.КлючПравила = &КлючПравила";
	запрос.УстановитьПараметр("КлючПравила",лпКлючПравила);
	Выборка = Запрос.Выполнить().Выбрать();
	если Выборка.Количество()<> 0 Тогда 
	выборка.Следующий();
	
	Возврат Выборка.КоличествоДнейЗадолженности;
	КонецЕсли;
КонецФункции


Функция НужноОтправлятьСообщениеКонтрагенту(Контрагент, ОбъектРасчетов=Неопределено, КлючПравила,Сумма) 
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ЖурналСобытий.Контрагент КАК Контрагент,
	               |	АИД_ЖурналСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	               |	АИД_ЖурналСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	               |	АИД_ЖурналСобытий.КлючПравила КАК КлючПравила,
	               |	АИД_ЖурналСобытий.СтатусСобытия КАК Отправлено
	               |ИЗ
	               |	РегистрСведений.АИД_ЖурналСобытий КАК АИД_ЖурналСобытий
	               |ГДЕ
	               |	АИД_ЖурналСобытий.СтатусСобытия
	               |	И АИД_ЖурналСобытий.Контрагент = &Контрагент
	               |	И АИД_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов
				   |	И АИД_ЖурналСобытий.КлючПравила = &КлючПравила
				   |	И АИД_ЖурналСобытий.Сумма = &Сумма

				   |ОБЪЕДИНИТЬ ВСЕ
				   |ВЫБРАТЬ 
				   |	ИсключенныеИзРассылки.Контрагент,
				   |	NULL,
				   |	NULL,
				   |	NULL,
				   |	NULL
				   |ИЗ РегистрСведений.АИД_НеВключатьВРассылку КАК ИсключенныеИзРассылки
	               |ГДЕ
	               |	ИсключенныеИзРассылки.Контрагент = &Контрагент
				   |";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Если ОбъектРасчетов = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И АИД_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов","");
	Иначе 
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	КонецЕсли;
	Запрос.УстановитьПараметр("КлючПравила", КлючПравила);
	Запрос.УстановитьПараметр("Сумма", Сумма);

	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		//Сообщение уже отправлено.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции


Функция ПолучитьДанныеКИКонтрагента(Контрагент)
	
	УстановитьПривилегированныйРежим(Истина);
	Ответ  = новый Структура("Почта, Телефон", "", "");
	Запрос = Новый Запрос;

	//Установка значений параметров
	Запрос.УстановитьПараметр("Ссылка", Контрагент);

	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК ВидКИ,
	               |	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление, """") КАК ЗначениеКИ
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагенты)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2,
	               |	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление, """")
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)";

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		ЕстьМобильныйТелефон = Ложь;
		пока Выборка.Следующий() Цикл
			Если Выборка.ВидКИ = 1 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Почта", Выборка.ЗначениеКИ);
			ИначеЕсли Выборка.ВидКИ = 2 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции
Функция ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо)
	УстановитьПривилегированныйРежим(Истина);
	
	Ответ  = новый Структура("Почта, Телефон", "", "");
	Запрос = Новый Запрос;

	//Установка значений параметров
	Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);

	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК ВидКИ,
	               |	ЕСТЬNULL(КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Представление, """") КАК ЗначениеКИ
	               |ИЗ
	               |	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтрагентовКонтактнаяИнформация
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтактныеЛица)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2,
	               |	ЕСТЬNULL(КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Представление, """")
	               |ИЗ
	               |	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтрагентовКонтактнаяИнформация
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	3,
	               |	ЕСТЬNULL(КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Представление, """")
	               |ИЗ
	               |	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтрагентовКонтактнаяИнформация
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица)";

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		ЕстьМобильныйТелефон = Ложь;
		пока Выборка.Следующий() Цикл
			Если Выборка.ВидКИ = 1 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Почта", Выборка.ЗначениеКИ);
			ИначеЕсли Выборка.ВидКИ = 2 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
				ЕстьМобильныйТелефон = Истина;
			ИначеЕсли Не ЕстьМобильныйТелефон и Выборка.ВидКИ = 3 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции
Функция Аид_ПолучитьКонтактноеЛицоПартнера(Партнер) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.Текст = "ВЫБРАТЬ
	|	Аид_КонтактныеЛицаКонтрагентов.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	РегистрСведений.Аид_КонтактныеЛицаКонтрагентов КАК Аид_КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	Аид_КонтактныеЛицаКонтрагентов.Контрагент = &Партнер";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.КонтактноеЛицо;
	КонецЕсли;
	Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
КонецФункции
Функция ПолучитьОрганизацииДЗ() 
	
	УстановитьПривилегированныйРежим(Истина);
	МассивОрганизаций = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Организации.Ссылка КАК Организация
	               |ИЗ
	               |	РегистрСведений.АИД_Настройки КАК АИД_Настройки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АИД_Настройки.Организация
	               |ИЗ
	               |	РегистрСведений.АИД_Настройки КАК АИД_Настройки
				   |ГДЕ
	               |	НЕ АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				   |";
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаРез из Результат Цикл
		МассивОрганизаций.Добавить(СтрокаРез.Организация);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивОрганизаций;
	
КонецФункции
Функция ПолучитьНастройкуЗадолженности() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	АИД_Настройки.ВключатьЗадолженность КАК ВключатьЗадолженность
	|ИЗ
	|	РегистрСведений.АИД_Настройки КАК АИД_Настройки
	|";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ВключатьЗадолженность;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции
Функция ПолучитьПараметрыДебиторскойЗадолженностиПоУмолчанию() 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Сутки", 24*60*60);
	СтруктураПараметров.Вставить("ДатаОтчета", ТекущаяДата());
	СтруктураПараметров.Вставить("ДанныеОтчета", 1);
	СтруктураПараметров.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	СтруктураПараметров.Вставить("ВсеДолги", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	АИД_ВариантыКлассификацииЗадолженности.Ссылка КАК Ссылка,
		|	АИД_ВариантыКлассификацииЗадолженности.Календарь КАК Календарь
		|ИЗ
		|	Справочник.АИД_ВариантыКлассификацииЗадолженности КАК АИД_ВариантыКлассификацииЗадолженности
		|ГДЕ
		|	НЕ АИД_ВариантыКлассификацииЗадолженности.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В системе не указаны варианты классификации задолженности.");
	иначе	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураПараметров.Вставить("ВариантКлассификации", Выборка.Ссылка);
		СтруктураПараметров.Вставить("Календарь", Выборка.Календарь);
		СтруктураПараметров.Вставить("ВариантКлассификацииВыбор", Выборка.Количество() > 1);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДатаАктуальностиРасчетов",ТекущаяДата());
	
	Возврат СтруктураПараметров;
	
КонецФункции
Функция ПолучитьДатуАктуальностиДЗ()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	        |	АИД_ДатаАктуальностиДЗ.ДатаАктуальностиДЗ КАК ДатаАктуальностиДЗ
	        |ИЗ
	        |	РегистрСведений.АИД_ДатаАктуальностиДЗ КАК АИД_ДатаАктуальностиДЗ
	        |ГДЕ
	        |	АИД_ДатаАктуальностиДЗ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ДатаАктуальностиДЗ;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Дата(1, 1, 1);
	
КонецФункции
