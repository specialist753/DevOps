
Функция ПолучитьДанныеДляФормированияСобытияАИД(Знач ВидДоговора, 
												Знач СтатусКонтрагента, 
												Знач Контрагент,
												Знач ОбъектРасчетов,
												Знач ДеньНедели,
												Знач КоличествоДнейЗадолженности,
												Знач Сумма) Экспорт


	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Контрагент",                     Контрагент);
	Запрос.УстановитьПараметр("ВидДоговора",                 ВидДоговора);
	Запрос.УстановитьПараметр("СтатусКонтрагента",              СтатусКонтрагента);
	Запрос.УстановитьПараметр("ОбъектРасчетов",              ОбъектРасчетов);
	Запрос.УстановитьПараметр("ДеньНедели",                  ДеньНедели);
	Запрос.УстановитьПараметр("КоличествоДнейЗадолженности", КоличествоДнейЗадолженности);
	Запрос.УстановитьПараметр("ПустойКонтрагент",        Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидДоговора",    Справочники.АИД_ВидыДоговоров.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСтатусКонтрагента", Справочники.АИД_СтатусыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойОбъектРасчетов", Неопределено);
	Запрос.УстановитьПараметр("ПустойДеньНедели",     0);  //любой день недели
	Запрос.УстановитьПараметр("ПустойКоличествоДнейЗадолженности", 0);  //любое количество дней задолженности
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АИД_ПравилаФормированияСобытий.ВидДоговора КАК ВидДоговора,
	|	АИД_ПравилаФормированияСобытий.СтатусКонтрагента КАК СтатусКонтрагента,
	|	АИД_ПравилаФормированияСобытий.Контрагент КАК Контрагент,
	|	АИД_ПравилаФормированияСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	|	АИД_ПравилаФормированияСобытий.ДеньНедели КАК ДеньНедели,
	|	АИД_ПравилаФормированияСобытий.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности,
	|	АИД_ПравилаФормированияСобытий.ТипСообщения КАК ТипСообщения,
	|	АИД_ПравилаФормированияСобытий.ВремяНачала КАК ВремяНачала,
	|	АИД_ПравилаФормированияСобытий.ВремяОкончания КАК ВремяОкончания,
	|	АИД_ПравилаФормированияСобытий.ИнтервалСообщений КАК ИнтервалСообщений,
	|	АИД_ПравилаФормированияСобытий.КоличествоПовторов КАК КоличествоПовторов,
	|	АИД_ПравилаФормированияСобытий.УчитыватьЧасовойПояс КАК УчитыватьЧасовойПояс,
	|	АИД_ПравилаФормированияСобытий.ШаблонСообщения КАК ШаблонСообщения,
	|	АИД_ПравилаФормированияСобытий.РазовоеУведомление КАК РазовоеУведомление,
	|	АИД_ПравилаФормированияСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	АИД_ПравилаФормированияСобытий.КлючПравила КАК КлючПравила,
	|	АИД_ПравилаФормированияСобытий.ДетализироватьПоОбъектамРасчетов КАК ДетализироватьПоОбъектамРасчетов
	|ПОМЕСТИТЬ ВтПравила
	|ИЗ
	|	РегистрСведений.АИД_ПравилаФормированияСобытий КАК АИД_ПравилаФормированияСобытий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДоговора,
	|	Контрагент,
	|	ОбъектРасчетов,
	|	ДеньНедели,
	|	КоличествоДнейЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//1. Контрагент, Объект расчетов, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВтПравила.ВидДоговора КАК ВидДоговора,
	|	ВтПравила.СтатусКонтрагента КАК СтатусКонтрагента,
	|	ВтПравила.Контрагент КАК Контрагент,
	|	ВтПравила.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВтПравила.ДеньНедели КАК ДеньНедели,
	|	ВтПравила.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности,
	|	1 КАК Приоритет,
	|	ВтПравила.ТипСообщения КАК ТипСообщения,
	|	ВтПравила.ВремяНачала КАК ВремяНачала,
	|	ВтПравила.ВремяОкончания КАК ВремяОкончания,
	|	ВтПравила.ИнтервалСообщений КАК ИнтервалСообщений,
	|	ВтПравила.КоличествоПовторов КАК КоличествоПовторов,
	|	ВтПравила.УчитыватьЧасовойПояс КАК УчитыватьЧасовойПояс,
	|	ВтПравила.ШаблонСообщения КАК ШаблонСообщения,
	|	ВтПравила.РазовоеУведомление КАК РазовоеУведомление,
	|	ВтПравила.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	ВтПравила.КлючПравила КАК КлючПравила,
	|	ВтПравила.ДетализироватьПоОбъектамРасчетов КАК ДетализироватьПоОбъектамРасчетов
	|ИЗ
	|	ВтПравила КАК ВтПравила
	|ГДЕ
	|	ВтПравила.Контрагент = &Контрагент
	|	И ВтПравила.ОбъектРасчетов = &ОбъектРасчетов
	|	И ВтПравила.ДеньНедели = &ДеньНедели
	|	И ВтПравила.КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//2. Контрагент, День недели,	Количество дней задолженности	
	|ВЫБРАТЬ
	|	ВтПравила.ВидДоговора,
	|	ВтПравила.СтатусКонтрагента,
	|	ВтПравила.Контрагент,
	|	ВтПравила.ОбъектРасчетов,
	|	ВтПравила.ДеньНедели,
	|	ВтПравила.КоличествоДнейЗадолженности,
	|	2,
	|	ВтПравила.ТипСообщения,
	|	ВтПравила.ВремяНачала,
	|	ВтПравила.ВремяОкончания,
	|	ВтПравила.ИнтервалСообщений,
	|	ВтПравила.КоличествоПовторов,
	|	ВтПравила.УчитыватьЧасовойПояс,
	|	ВтПравила.ШаблонСообщения,
	|	ВтПравила.РазовоеУведомление,
	|	ВтПравила.КлючРегламентногоЗадания,
	|	ВтПравила.КлючПравила,
	|	ВтПравила.ДетализироватьПоОбъектамРасчетов
	|ИЗ
	|	ВтПравила КАК ВтПравила
	|ГДЕ
	|	ВтПравила.Контрагент = &Контрагент
	|	И ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов
	|	И ВтПравила.ДеньНедели = &ДеньНедели
	|	И ВтПравила.КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//3. Статус партнера, Контрагент, День недели,	Количество дней задолженности
	//|ВЫБРАТЬ
	//|	ВидДоговора,
	//|   СтатусКонтрагента,
	//|   Контрагент,
	//|   ОбъектРасчетов,
	//|   ДеньНедели,
	//|   КоличествоДнейЗадолженности,
	//|	3 КАК Приоритет,
	//|	ТипСообщения,
	//|	ВремяНачала,
	//|	ВремяОкончания,
	//|	ИнтервалСообщений,
	//|	КоличествоПовторов,
	//|	УчитыватьЧасовойПояс,
	//|	ШаблонСообщения,
	//|	РазовоеУведомление,
	//|   КлючРегламентногоЗадания,
	//|   КлючПравила,
	//|	ДетализироватьПоОбъектамРасчетов
	//|ИЗ
	//|	РегистрСведений.АИД_ПравилаФормированияСобытий
	//|
	//|ГДЕ
	//|	
	//|	СтатусКонтрагента = &СтатусКонтрагента И
	//|	Контрагент = &Контрагент И
	//|	ОбъектРасчетов = &ПустойОбъектРасчетов И
	//|	ДеньНедели = &ДеньНедели И
	//|	КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	//|
	//|ОБЪЕДИНИТЬ
	|
	//4. Вид договора, Контрагент, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВтПравила.ВидДоговора,
	|	ВтПравила.СтатусКонтрагента,
	|	ВтПравила.Контрагент,
	|	ВтПравила.ОбъектРасчетов,
	|	ВтПравила.ДеньНедели,
	|	ВтПравила.КоличествоДнейЗадолженности,
	|	4,
	|	ВтПравила.ТипСообщения,
	|	ВтПравила.ВремяНачала,
	|	ВтПравила.ВремяОкончания,
	|	ВтПравила.ИнтервалСообщений,
	|	ВтПравила.КоличествоПовторов,
	|	ВтПравила.УчитыватьЧасовойПояс,
	|	ВтПравила.ШаблонСообщения,
	|	ВтПравила.РазовоеУведомление,
	|	ВтПравила.КлючРегламентногоЗадания,
	|	ВтПравила.КлючПравила,
	|	ВтПравила.ДетализироватьПоОбъектамРасчетов
	|ИЗ
	|	ВтПравила КАК ВтПравила
	|ГДЕ
	|	ВтПравила.ВидДоговора = &ВидДоговора
	|	И ВтПравила.Контрагент = &Контрагент
	|	И ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов
	|	И ВтПравила.ДеньНедели = &ДеньНедели
	|	И ВтПравила.КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//5. Вид договора, Статус партнера, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВтПравила.ВидДоговора,
	|	ВтПравила.СтатусКонтрагента,
	|	ВтПравила.Контрагент,
	|	ВтПравила.ОбъектРасчетов,
	|	ВтПравила.ДеньНедели,
	|	ВтПравила.КоличествоДнейЗадолженности,
	|	5,
	|	ВтПравила.ТипСообщения,
	|	ВтПравила.ВремяНачала,
	|	ВтПравила.ВремяОкончания,
	|	ВтПравила.ИнтервалСообщений,
	|	ВтПравила.КоличествоПовторов,
	|	ВтПравила.УчитыватьЧасовойПояс,
	|	ВтПравила.ШаблонСообщения,
	|	ВтПравила.РазовоеУведомление,
	|	ВтПравила.КлючРегламентногоЗадания,
	|	ВтПравила.КлючПравила,
	|	ВтПравила.ДетализироватьПоОбъектамРасчетов
	|ИЗ
	|	ВтПравила КАК ВтПравила
	|ГДЕ
	|	ВтПравила.ВидДоговора = &ВидДоговора
	|	И ВтПравила.СтатусКонтрагента = &СтатусКонтрагента
	|	И ВтПравила.Контрагент = &ПустойКонтрагент
	|	И ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов
	|	И ВтПравила.ДеньНедели = &ДеньНедели
	|	И ВтПравила.КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//6. Статус партнера, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВтПравила.ВидДоговора,
	|	ВтПравила.СтатусКонтрагента,
	|	ВтПравила.Контрагент,
	|	ВтПравила.ОбъектРасчетов,
	|	ВтПравила.ДеньНедели,
	|	ВтПравила.КоличествоДнейЗадолженности,
	|	6,
	|	ВтПравила.ТипСообщения,
	|	ВтПравила.ВремяНачала,
	|	ВтПравила.ВремяОкончания,
	|	ВтПравила.ИнтервалСообщений,
	|	ВтПравила.КоличествоПовторов,
	|	ВтПравила.УчитыватьЧасовойПояс,
	|	ВтПравила.ШаблонСообщения,
	|	ВтПравила.РазовоеУведомление,
	|	ВтПравила.КлючРегламентногоЗадания,
	|	ВтПравила.КлючПравила,
	|	ВтПравила.ДетализироватьПоОбъектамРасчетов
	|ИЗ
	|	ВтПравила КАК ВтПравила
	|ГДЕ
	|	ВтПравила.ВидДоговора = &ПустойВидДоговора
	|	И ВтПравила.СтатусКонтрагента = &СтатусКонтрагента
	|	И ВтПравила.Контрагент = &ПустойКонтрагент
	|	И ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов
	|	И ВтПравила.ДеньНедели = &ДеньНедели
	|	И ВтПравила.КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//7. Вид договора, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВтПравила.ВидДоговора,
	|	ВтПравила.СтатусКонтрагента,
	|	ВтПравила.Контрагент,
	|	ВтПравила.ОбъектРасчетов,
	|	ВтПравила.ДеньНедели,
	|	ВтПравила.КоличествоДнейЗадолженности,
	|	7,
	|	ВтПравила.ТипСообщения,
	|	ВтПравила.ВремяНачала,
	|	ВтПравила.ВремяОкончания,
	|	ВтПравила.ИнтервалСообщений,
	|	ВтПравила.КоличествоПовторов,
	|	ВтПравила.УчитыватьЧасовойПояс,
	|	ВтПравила.ШаблонСообщения,
	|	ВтПравила.РазовоеУведомление,
	|	ВтПравила.КлючРегламентногоЗадания,
	|	ВтПравила.КлючПравила,
	|	ВтПравила.ДетализироватьПоОбъектамРасчетов
	|ИЗ
	|	ВтПравила КАК ВтПравила
	|ГДЕ
	|	ВтПравила.ВидДоговора = &ВидДоговора
	|	И ВтПравила.СтатусКонтрагента = &ПустойСтатусКонтрагента
	|	И ВтПравила.Контрагент = &ПустойКонтрагент
	|	И ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов
	|	И ВтПравила.ДеньНедели = &ДеньНедели
	|	И ВтПравила.КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности";
	
	Если КоличествоДнейЗадолженности > 0 тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ
		|
		//8. учитываем только партнера, день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай для партнера)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	8,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ПустойВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &ПустойСтатусКонтрагента И
		|	ВтПравила.Контрагент = &Контрагент И
		|	ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		|
		|ОБЪЕДИНИТЬ
		|
		//8.1. учитываем только Статус и Вид договора, день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай для партнера)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	9,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &СтатусКонтрагента И
		|	ВтПравила.Контрагент = &ПустойКонтрагент И
		|	ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		
		|
		|ОБЪЕДИНИТЬ
		|
		//9. учитываем только вид договора, день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай для вида договора)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	10,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &ПустойСтатусКонтрагента И
		|	ВтПравила.Контрагент = &ПустойКонтрагент И
		|	ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		|
		//|ОБЪЕДИНИТЬ 
		//|
		////10. учитываем только статус партнера, день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай для статуса партнера)
		//|ВЫБРАТЬ
		//|	ВидДоговора,
		//|   СтатусКонтрагента,
		//|   Контрагент,
		//|   ОбъектРасчетов,
		//|   ДеньНедели,
		//|   КоличествоДнейЗадолженности,
		//|	11 КАК Приоритет,
		//|	ТипСообщения,
		//|	ВремяНачала,
		//|	ВремяОкончания,
		//|	ИнтервалСообщений,
		//|	КоличествоПовторов,
		//|	УчитыватьЧасовойПояс,
		//|	ШаблонСообщения,
		//|	РазовоеУведомление,
		//|   КлючРегламентногоЗадания,
		//|   КлючПравила,
		//|	ДетализироватьПоОбъектамРасчетов
		//|ИЗ
		//|	РегистрСведений.АИД_ПравилаФормированияСобытий
		//|
		//|ГДЕ
		//|	
		//|	ВидДоговора = &ПустойВидДоговора И
		//|	СтатусКонтрагента = &СтатусКонтрагента И
		//|	Контрагент = &ПустойКонтрагент И
		//|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		//|	ДеньНедели = &ДеньНедели И
		//|	КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		//|
		|ОБЪЕДИНИТЬ
		|
		//11. учитываем только день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	12,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ПустойВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &ПустойСтатусКонтрагента И
		|	ВтПравила.Контрагент = &ПустойКонтрагент И
		|	ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		|ОБЪЕДИНИТЬ 
		|
		//13. учитываем только партнера, день недели, дни задолженности (>0) и объект расчетов (как общий случай для статуса партнера)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	13,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ПустойВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &СтатусКонтрагента И
		|	ВтПравила.Контрагент = &Контрагент И
		|	ВтПравила.ОбъектРасчетов = &ОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности

		|";
	иначе
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ
		|
		//12. учитываем только партнера, день недели, дни задолженности(<0, как оповещение до наступления события) и пустой объект расчетов (как общий случай для партнера)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	13,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ПустойВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &ПустойСтатусКонтрагента И
		|	ВтПравила.Контрагент = &Контрагент И
		|	ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности
		|ОБЪЕДИНИТЬ
		|
		//13. учитываем только вид договора, день недели, дни задолженности(<0, как оповещение до наступления события) 
		//и пустой объект расчетов (как общий случай для вида договора)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	14,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &ПустойСтатусКонтрагента И
		|	ВтПравила.Контрагент = &ПустойКонтрагент И
		|	ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности
		|
		|ОБЪЕДИНИТЬ
		|
		//14. учитываем только статус партнера, день недели, дни задолженности(<0, как оповещение до наступления события) 
		//и пустой объект расчетов (как общий случай для статуса партнера)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	15,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ПустойВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &СтатусКонтрагента И
		|	ВтПравила.Контрагент = &ПустойКонтрагент И
		|	ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности
		|
		|ОБЪЕДИНИТЬ
		|
		//15. учитываем только день недели, дни задолженности(<0, как оповещение до наступления события) и пустой объект расчетов (как общий случай)
		|ВЫБРАТЬ
		|	ВтПравила.ВидДоговора,
		|	ВтПравила.СтатусКонтрагента,
		|	ВтПравила.Контрагент,
		|	ВтПравила.ОбъектРасчетов,
		|	ВтПравила.ДеньНедели,
		|	ВтПравила.КоличествоДнейЗадолженности,
		|	17,
		|	ВтПравила.ТипСообщения,
		|	ВтПравила.ВремяНачала,
		|	ВтПравила.ВремяОкончания,
		|	ВтПравила.ИнтервалСообщений,
		|	ВтПравила.КоличествоПовторов,
		|	ВтПравила.УчитыватьЧасовойПояс,
		|	ВтПравила.ШаблонСообщения,
		|	ВтПравила.РазовоеУведомление,
		|	ВтПравила.КлючРегламентногоЗадания,
		|	ВтПравила.КлючПравила,
		|	ВтПравила.ДетализироватьПоОбъектамРасчетов
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|
		|ГДЕ
		|	
		|	ВтПравила.ВидДоговора = &ПустойВидДоговора И
		|	ВтПравила.СтатусКонтрагента = &ПустойСтатусКонтрагента И
		|	ВтПравила.Контрагент = &ПустойКонтрагент И
		|	ВтПравила.ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ВтПравила.ДеньНедели = &ДеньНедели И
		|	ВтПравила.КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности
		//|	КоличествоДнейЗадолженности <= 0
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|   КоличествоДнейЗадолженности убыв
		|";
	Если КоличествоДнейЗадолженности = 1 Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности","1=1");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности","1=1");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности","1=1");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаДанных.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);	
	КонецЦикла;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.РазовоеУведомление Тогда 
				НоваяСтр = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
				
			Иначе 
				// Проверяем, отправлялось ли сообщение партнеру по шаблону.
				Если НужноОтправлятьСообщениеКонтрагенту(Контрагент, ОбъектРасчетов, Выборка.КлючПравила,Сумма) Тогда
					НоваяСтр = ТаблицаДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоДнейЗадолженности = 1 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаДанных;
	
	//Выборка = Запрос.Выполнить().Выбрать();

	//Результат = Запрос.Выполнить().Выгрузить();
	//Результат.Очистить();
	//
	//Если КоличествоДнейЗадолженности = 1 Тогда
	//	Выборка.Следующий();
	//	Если Выборка.РазовоеУведомление Тогда 
	//		НоваяСтр = Результат.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
	//		
	//	Иначе 
	//		// Проверяем, отправлялось ли сообщение партнеру по шаблону.
	//		Если НужноОтправлятьСообщениеКонтрагенту(Контрагент, ОбъектРасчетов, Выборка.КлючПравила,Сумма) Тогда
	//			НоваяСтр = Результат.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//Иначе 
	//	Пока Выборка.Следующий() Цикл
	//		Если Выборка.РазовоеУведомление Тогда 
	//			НоваяСтр = Результат.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
	//			
	//		Иначе 
	//			// Проверяем, отправлялось ли сообщение партнеру по шаблону.
	//			Если НужноОтправлятьСообщениеКонтрагенту(Контрагент, ОбъектРасчетов, Выборка.КлючПравила,Сумма) Тогда
	//				НоваяСтр = Результат.Добавить();
	//				ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//Возврат Результат;

КонецФункции

Функция НужноОтправлятьСообщениеКонтрагенту(Контрагент, ОбъектРасчетов=Неопределено, КлючПравила,Сумма) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ЖурналСобытий.Контрагент КАК Контрагент,
	               |	АИД_ЖурналСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	               |	АИД_ЖурналСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	               |	АИД_ЖурналСобытий.КлючПравила КАК КлючПравила,
	               |	АИД_ЖурналСобытий.СтатусСобытия КАК Отправлено
	               |ИЗ
	               |	РегистрСведений.АИД_ЖурналСобытий КАК АИД_ЖурналСобытий
	               |ГДЕ
	               |	АИД_ЖурналСобытий.СтатусСобытия
	               |	И АИД_ЖурналСобытий.Контрагент = &Контрагент
	               |	И АИД_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов
				   |	И АИД_ЖурналСобытий.КлючПравила = &КлючПравила
				   |	И АИД_ЖурналСобытий.Сумма = &Сумма

				   |ОБЪЕДИНИТЬ ВСЕ
				   |ВЫБРАТЬ 
				   |	ИсключенныеИзРассылки.Контрагент,
				   |	NULL,
				   |	NULL,
				   |	NULL,
				   |	NULL
				   |ИЗ РегистрСведений.АИД_НеВключатьВРассылку КАК ИсключенныеИзРассылки
	               |ГДЕ
	               |	ИсключенныеИзРассылки.Контрагент = &Контрагент
				   |";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Если ОбъектРасчетов = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И АИД_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов","");
	Иначе 
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	КонецЕсли;
	Запрос.УстановитьПараметр("КлючПравила", КлючПравила);
	Запрос.УстановитьПараметр("Сумма", Сумма);

	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		//Сообщение уже отправлено.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции



Функция Аид_КонтактноеЛицоПоУмолчанию(Владелец) Экспорт

		//Аид
	КонтактноеЛицоАИД = Аид_ПолучитьКонтактноеЛицоПартнера(Владелец);
	Если ЗначениеЗаполнено(КонтактноеЛицоАИД) Тогда
		Возврат КонтактноеЛицоАИД;
	КонецЕсли;
	//Аид

	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОсновноеКонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ОсновноеКонтактноеЛицо");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ОсновноеКонтактноеЛицо", ОсновноеКонтактноеЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	КонтактныеЛица.Ссылка,
	|	ВЫБОР
	|		КОГДА КонтактныеЛица.Ссылка = &ОсновноеКонтактноеЛицо
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокСортировки
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.КонтактныеЛица.ПустаяСсылка();

КонецФункции

Функция Аид_ПолучитьКонтактноеЛицоПартнера(Партнер) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.Текст = "ВЫБРАТЬ
	|	Аид_КонтактныеЛицаКонтрагентов.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	РегистрСведений.Аид_КонтактныеЛицаКонтрагентов КАК Аид_КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	Аид_КонтактныеЛицаКонтрагентов.Контрагент = &Партнер";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.КонтактноеЛицо;
	КонецЕсли;
	Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
КонецФункции




Процедура ВыполнитьЗаполнениеСпискаЗадолженностиДляСообщений() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ДатаОтчета = КонецДня(ТекущаяДата());
	
	ДатаАктуальностиРасчетов = ПолучитьДатуАктуальностиДЗ();
	ДатаАктуальности = ДатаАктуальностиРасчетов;
	
	Если Не ДатаАктуальности = Неопределено и ДатаАктуальности < ДатаОтчета Тогда 
		ТекстПредупреждения = "Внимание!! Распределение расчетов по клиентам выполнено до %ДатаАктуальности%. Данные могут быть не корректны.";
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ДатаАктуальности%", Формат(ДатаАктуальности, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
	КонецЕсли;
	
	
	
	//из отчета "ДебиторскаяЗадолженность"
	Результат = СрокиОплатыДокументов.ПросроченнаяЗадолженностьПокупателей(
									Справочники.Организации.ПустаяСсылка(),
									КонецДня(ДатаОтчета),
									Ложь);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = АИД_ОбщегоНазначенияПереопределяемый.ПолучитьТекстЗапросаДебиторскойЗадолженности(Неопределено);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ТаблицаЗадолженностей.Контрагент В (&Контрагент)","");
	
	ПараметрыДЗ = ПолучитьПараметрыДебиторскойЗадолженностиПоУмолчанию();
	Запрос.УстановитьПараметр("ПраваяГраницаОтчета",                  КонецДня((ДатаОтчета + 4*ПараметрыДЗ.Сутки)));
	Запрос.УстановитьПараметр("ДатаОтчета",                           ДатаОтчета);
	Запрос.УстановитьПараметр("ДатаОстатков",                         Новый Граница(КонецДня(КонецДня(ДатаОтчета) + 1), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Валюта",                               ПараметрыДЗ.Валюта);
	Запрос.УстановитьПараметр("ДанныеОтчета",                         ПараметрыДЗ.ДанныеОтчета);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуКонтрагентов", Ложь);
	Запрос.УстановитьПараметр("ВсеДолги",                             ПараметрыДЗ.ВсеДолги);
	Запрос.УстановитьПараметр("СтрокаДолгНеПросрочен",                "0 дней");
	Запрос.УстановитьПараметр("ВключатьЗадолженность", 				  ПолучитьНастройкуЗадолженности());
	Запрос.УстановитьПараметр("ДатаОтчетаГраница", 				      КонецДня((ДатаОтчета + 4*ПараметрыДЗ.Сутки)));
	Запрос.УстановитьПараметр("ДатаАктуальностиДЗ", 				  ДатаАктуальности);
	Запрос.УстановитьПараметр("СтрокаСостояниеВзаиморасчетов", 		  НСтр("ru='Состояние взаиморасчетов'"));
	запрос.УстановитьПараметр("ОтсрочкаПоУмолчанию",				  Константы.СрокОплатыПокупателей.Получить());
	//запрос.УстановитьПараметр("Контрагент",				  Справочники.Контрагенты.НайтиПоНаименованию("Магазин №23"));
	МассивОрганизаций = ПолучитьОрганизацииДЗ();
	Запрос.УстановитьПараметр("Организации", 					  МассивОрганизаций);
	Запрос.УстановитьПараметр("Тз",Результат );
	
	
	Если Не ПараметрыДЗ.Свойство("ВариантКлассификации") Тогда
		Запрос.УстановитьПараметр("ВариантКлассификацииЗадолженности",    Справочники.АИД_ВариантыКлассификацииЗадолженности.ПустаяСсылка());
		Запрос.УстановитьПараметр("Календарь",                            Справочники.ПроизводственныеКалендари.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ВариантКлассификацииЗадолженности",    ПараметрыДЗ.ВариантКлассификации);
		Запрос.УстановитьПараметр("Календарь",                            ПараметрыДЗ.Календарь);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	лпТаблица = Результат.Скопировать();
	лпТаблица.Очистить();
	лпТаблица.Колонки.Добавить("ДетализироватьПоОбъектамРасчетов", Новый ОписаниеТипов("Булево"));
	лпТаблица.Колонки.Добавить("КлючРегламентногоЗадания", Новый ОписаниеТипов("УникальныйИдентификатор"));
	лпТаблица.Колонки.Добавить("КлючПравила", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ДеньНеделиОтчета = ДеньНедели(ДатаОтчета + 1);
	Для каждого СтрокаРезультат из Результат Цикл
		Если СтрокаРезультат.ИсключенИзРассылки Тогда
			Продолжить;
		КонецЕсли;
		
		//Кол-во дней задолженности расчитаны на следующий день.
		//Для ТекДатаПлюс1 это будет на 1 сутки больше
		Если ПараметрыДЗ.ВсеДолги и СтрокаРезультат.КоличествоДней = 0 тогда
			КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДнейДоПлатежа;
			Сумма                       = СтрокаРезультат.ДолгКлиента;  
		иначе	
			КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДней;
			Сумма                       = СтрокаРезультат.ДолгКлиентаПросрочено;   
		КонецЕсли;
		стррДанные = АИД_ОбщегоНазначенияПереопределяемый.ПолучитьДанныеДляФормированияСобытияАИД(СтрокаРезультат.ВидДоговора,
		СтрокаРезультат.СтатусКонтрагента,
		СтрокаРезультат.Контрагент,
		СтрокаРезультат.ЗаказКлиента,
		ДеньНеделиОтчета,
		//КоличествоДнейЗадолженности + 1,Сумма);
		10000,Сумма);
		
		Для Каждого Стр Из стррДанные Цикл 
			Если ЗначениеЗаполнено(Стр.КлючРегламентногоЗадания) Тогда
				
				НоваяСтр = лпТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр,СтрокаРезультат);
				НоваяСтр.ДетализироватьПоОбъектамРасчетов = Стр.ДетализироватьПоОбъектамРасчетов;
				НоваяСтр.КлючРегламентногоЗадания = Стр.КлючРегламентногоЗадания;
				НоваяСтр.КлючПравила = Стр.КлючПравила;
				//НоваяСтр.Сумма = Сумма;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Истина);
	лпТаблОбъектов = лпТаблица.Скопировать(Отбор);	
	
	Для Каждого СтрокаРезультат Из лпТаблОбъектов Цикл 
		
		лпКоличествоДней = КоличесвтоДней(СтрокаРезультат.КлючПравила);
		Если СтрокаРезультат.КоличествоДней >= лпКоличествоДней Тогда 
			
			Телефон = "";
			Почта = "";
			Если ЗначениеЗаполнено(СтрокаРезультат.КонтактноеЛицо) тогда
				КонтактноеЛицо = СтрокаРезультат.КонтактноеЛицо;
			иначе
				//КонтактноеЛицо = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(СтрокаРезультат.Контрагент); Руслан закомментировал 21.12.21
				КонтактноеЛицо = Аид_ПолучитьКонтактноеЛицоПартнера(СтрокаРезультат.Контрагент);  //Руслан 21.12.21
				
				
				СтрокаРезультат.КонтактноеЛицо = КонтактноеЛицо;
			КонецЕсли;
			Если ЗначениеЗаполнено(КонтактноеЛицо) тогда
				стррДанныеКИ = ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо);
				Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
				Почта   = стррДанныеКИ.Почта;
				// если не удалось определить контактное лицо - получаем телефон и почту партнера
			Иначе
				стррДанныеКИ = ПолучитьДанныеКИКонтрагента(СтрокаРезультат.Контрагент);
				Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
				Почта   = стррДанныеКИ.Почта;
			КонецЕсли;
			
			НоваяЗапись = РегистрыСведений.АИД_СписокСообщений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРезультат);
			НоваяЗапись.ДатаСобытия = ДатаОтчета + 1;
			НоваяЗапись.КлючРегламентногоЗадания = СтрокаРезультат.КлючРегламентногоЗадания;
			НоваяЗапись.КлючПравила = СтрокаРезультат.КлючПравила;
			НоваяЗапись.КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДней; 
			НоваяЗапись.Телефон = Телефон;
			НоваяЗапись.Почта = Почта;
			НоваяЗапись.ОбъектРасчетов = СтрокаРезультат.ЗаказКлиента;
			НоваяЗапись.Записать();
		КонецЕсли;
	КонецЦикла;
	//	
	Отбор = Новый Структура;
	Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Ложь);
	лпТабл = лпТаблица.Скопировать(Отбор);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Табл.Организация КАК Организация,
	|	Табл.Контрагент КАК Контрагент,
	|	Табл.КонтактноеЛицо КАК КонтактноеЛицо,
	|	Табл.Валюта КАК Валюта,
	|	Табл.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	|	Табл.НомерИнтервала КАК НомерИнтервала,
	|	Табл.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	Табл.ДолгКлиента КАК ДолгКлиента,
	|	Табл.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
	|	Табл.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	|	Табл.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	Табл.ДатаПлатежа КАК ДатаПлатежа,
	|	Табл.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	Табл.КлючПравила КАК КлючПравила,
	|	Табл.КоличествоДней КАК КоличествоДнейЗадолженности
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Табл КАК Табл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Организация КАК Организация,
	|	ВТ.Контрагент КАК Контрагент,
	|	ВТ.КонтактноеЛицо КАК КонтактноеЛицо,
//	|	ВТ.Валюта КАК Валюта,
	|	ВТ.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	|	ВТ.НомерИнтервала КАК НомерИнтервала,
	|	ВТ.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	СУММА(ВТ.ДолгКлиента) КАК ДолгКлиента,
	|	СУММА(ВТ.ДолгКлиентаВВалютеОтчета) КАК ДолгКлиентаВВалютеОтчета,
	|	СУММА(ВТ.ДолгКлиентаПросрочено) КАК ДолгКлиентаПросрочено,
	|	СУММА(ВТ.ДолгКлиентаПросроченоВВалютеОтчета) КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	МИНИМУМ(ВТ.ДатаПлатежа) КАК ДатаПлатежа,
	|	ВТ.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	ВТ.КлючПравила КАК КлючПравила,
	|	МИНИМУМ(ВТ.КоличествоДнейЗадолженности) КАК КоличествоДнейЗадолженности
//	|	Сумма(ВТ.КоличествоДнейЗадолженности) КАК КоличествоДнейЗадолженности
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.КонтактноеЛицо,
//  |	ВТ.Валюта,
	|	ВТ.ИнтервалЗадолженности,
	|	ВТ.НомерИнтервала,
	|	ВТ.НижняяГраницаИнтервала,
	|	ВТ.КлючРегламентногоЗадания,
	|	ВТ.КлючПравила,
	|	ВТ.Организация,
	|	ВТ.Контрагент";
	Запрос.УстановитьПараметр("Табл",лпТабл);
	
	лпТаблИтог = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого СтрокаРезультат Из лпТаблИтог Цикл 
		лпКоличествоДней = КоличесвтоДней(СтрокаРезультат.КлючПравила);
		Если СтрокаРезультат.КоличествоДнейЗадолженности >= лпКоличествоДней Тогда 

			Если НужноОтправлятьСообщениеКонтрагенту(СтрокаРезультат.Контрагент,,СтрокаРезультат.КлючПравила,СтрокаРезультат.ДолгКлиента) Тогда 
				Телефон = "";
				Почта = "";
				Если ЗначениеЗаполнено(СтрокаРезультат.КонтактноеЛицо) тогда
					КонтактноеЛицо = СтрокаРезультат.КонтактноеЛицо;
				иначе
					//КонтактноеЛицо = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(СтрокаРезультат.Контрагент); Аид_ПолучитьКонтактноеЛицоПартнера
					КонтактноеЛицо = Аид_ПолучитьКонтактноеЛицоПартнера(СтрокаРезультат.Контрагент); 
					
					СтрокаРезультат.КонтактноеЛицо = КонтактноеЛицо;
				КонецЕсли;
				Если ЗначениеЗаполнено(КонтактноеЛицо) тогда
					стррДанныеКИ = ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо);
					Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
					Почта   = стррДанныеКИ.Почта;
					// если не удалось определить контактное лицо - получаем телефон и почту партнера
				Иначе
					стррДанныеКИ = ПолучитьДанныеКИКонтрагента(СтрокаРезультат.Контрагент);
					Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
					Почта   = стррДанныеКИ.Почта;
				КонецЕсли;
				
				// Добавляем запись в регистр.
				НоваяЗапись = РегистрыСведений.АИД_СписокСообщений.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРезультат);
				НоваяЗапись.ДатаСобытия = ДатаОтчета + 1;
				НоваяЗапись.КлючРегламентногоЗадания = СтрокаРезультат.КлючРегламентногоЗадания;
				НоваяЗапись.КлючПравила = СтрокаРезультат.КлючПравила;
				НоваяЗапись.КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДнейЗадолженности; 
				НоваяЗапись.Телефон = Телефон;
				НоваяЗапись.Почта = Почта;
				НоваяЗапись.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				НоваяЗапись.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	//КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

функция КоличесвтоДней(лпКлючПравила)
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ПравилаФормированияСобытий.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности
	               |ИЗ
	               |	РегистрСведений.АИД_ПравилаФормированияСобытий КАК АИД_ПравилаФормированияСобытий
	               |ГДЕ
	               |	АИД_ПравилаФормированияСобытий.КлючПравила = &КлючПравила";
	запрос.УстановитьПараметр("КлючПравила",лпКлючПравила);
	Выборка = Запрос.Выполнить().Выбрать();
	если Выборка.Количество()<> 0 Тогда 
	выборка.Следующий();
	
	Возврат Выборка.КоличествоДнейЗадолженности;
	КонецЕсли;
КонецФункции

Процедура ВыполнитьРегламентноеЗаданиеОтправкиСообщений(ПараметрыОтправки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	//Без ключа рег. задание не возможно выполнить.
	Если  ПараметрыОтправки.Свойство("ПараметрыКоманды") Тогда 
		Если Не ПараметрыОтправки.ПараметрыКоманды.Свойство("КлючРегЗадания") Тогда
			Возврат;
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отправку сообщений можно выполнить только через регламентированное задание!!!");	
		Возврат;
	КонецЕсли;
	
	КлючРегламентногоЗадания = Новый УникальныйИдентификатор(ПараметрыОтправки.ПараметрыКоманды.КлючРегЗадания);
	
	//Если по регл. задания нужно учытывать часовой пояс, 
	//тогда проверяем подходит ли нам время выполнения для часового пояса.
	УчитыватьЧасовойПояс = ПараметрыОтправки.ПараметрыКоманды.УчитыватьЧасовойПояс;
	ВремяНачала = ПараметрыОтправки.ПараметрыКоманды.ВремяНачала;
	ВремяКонца = ПараметрыОтправки.ПараметрыКоманды.ВремяКонца;
	
	МассивЧПДляОтправки = Новый Массив;
	Если УчитыватьЧасовойПояс Тогда
		МассивЧПДляОтправки = ПолучитьМассивЧасовыхПоясовДляОтправки(ВремяНачала, ВремяКонца);
	КонецЕсли;	
	
	//Получаем записи для отправки сообщений по ключу и по дате.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокЗадолженности.Организация КАК Организация,
	               |	СписокЗадолженности.Контрагент КАК Контрагент,
	               |	СписокЗадолженности.ОбъектРасчетов КАК ОбъектРасчетов,
	               |	СписокЗадолженности.ДатаСобытия КАК ДатаСобытия,
	               |	СписокЗадолженности.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	               |	СписокЗадолженности.КлючПравила КАК КлючПравила,
	               |	СписокЗадолженности.Договор КАК Договор,
	               |	СписокЗадолженности.ВидДоговора КАК ВидДоговора,
	               |	СписокЗадолженности.Валюта КАК Валюта,
	               |	СписокЗадолженности.ДатаПлатежа КАК ДатаПлатежа,
	               |	СписокЗадолженности.ДатаПлатежаПлан КАК ДатаПлатежаПлан,
	               |	СписокЗадолженности.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности,
	               |	СписокЗадолженности.ДолгКлиента КАК ДолгКлиента,
	               |	СписокЗадолженности.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	               |	СписокЗадолженности.НомерИнтервала КАК НомерИнтервала,
	               |	СписокЗадолженности.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	               |	СписокЗадолженности.КоличествоДнейДоПлатежа КАК КоличествоДнейДоПлатежа,
	               |	СписокЗадолженности.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	               |	СписокЗадолженности.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	СписокЗадолженности.Телефон КАК Телефон,
	               |	СписокЗадолженности.Почта КАК Почта,
	               |	СписокЗадолженности.СтатусКонтрагента КАК СтатусКонтрагента,
	               |	ЕстьNULL(НастройкиАИД.ЧасовойПояс, """") КАК ЧасовойПоясОрганизации
	               |ИЗ
	               |	РегистрСведений.АИД_СписокСообщений КАК СписокЗадолженности
				   |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АИД_Настройки КАК НастройкиАИД
				   |ПО СписокЗадолженности.Организация = НастройкиАИД.Организация  
	               |ГДЕ
	               |	СписокЗадолженности.КлючРегламентногоЗадания = &КлючРегламентногоЗадания
	               |	И СписокЗадолженности.ДатаСобытия = &ДатаСобытия
				   |";
	               //|	И НЕ СписокЗадолженности.Отправлено";
	Запрос.УстановитьПараметр("КлючРегламентногоЗадания", КлючРегламентногоЗадания);
	Запрос.УстановитьПараметр("ДатаСобытия", НачалоДня(ТекущаяДата()));
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//
	//Ищем шаблон для выполнения отправки по ключу.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ПравилаФормированияСобытий.ТипСообщения КАК ТипСообщения,
	               |	АИД_ПравилаФормированияСобытий.ШаблонСообщения КАК ШаблонСообщения,
	               |	АИД_ПравилаФормированияСобытий.РазовоеУведомление КАК РазовоеУведомление,
	               |	АИД_ПравилаФормированияСобытий.ВидДоговора КАК ВидДоговора,
	               |	АИД_ПравилаФормированияСобытий.СтатусКонтрагента КАК СтатусКонтрагента,
	               |	АИД_ПравилаФормированияСобытий.Контрагент КАК Контрагент,
	               |	АИД_ПравилаФормированияСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	               |	АИД_ПравилаФормированияСобытий.ДеньНедели КАК ДеньНедели,
	               |	АИД_ПравилаФормированияСобытий.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности,
	               |	АИД_ПравилаФормированияСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	               |	АИД_ПравилаФормированияСобытий.КлючПравила КАК КлючПравила
	               |ИЗ
	               |	РегистрСведений.АИД_ПравилаФормированияСобытий КАК АИД_ПравилаФормированияСобытий
	               |ГДЕ
	               |	АИД_ПравилаФормированияСобытий.КлючРегламентногоЗадания = &КлючРегламентногоЗадания";
	Запрос.УстановитьПараметр("КлючРегламентногоЗадания", КлючРегламентногоЗадания);
	
	ДанныеШаблона = Запрос.Выполнить();
	Если ДанныеШаблона.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ДанныеШаблона.Выбрать();
	Выборка.Следующий();
	
	ФиксСтруктура = ПолучитьФиксСтруктуруИзКолонокТЧ(Результат);
	
	Для каждого СтрокаРезультат из Результат Цикл
		
		// Проверяем можем мы сейчас отправить сообщение партнеру по его часовому поясу.
		Если УчитыватьЧасовойПояс Тогда
			Если НЕ СтрокаРезультат.Контрагент.АИД_ДругойЧасовойПояс Тогда
				ЧасовойПоясКонтрагента = СтрокаРезультат.ЧасовойПоясОрганизации;
			Иначе
				ЧасовойПоясКонтрагента = СтрокаРезультат.Контрагент.АИД_ЧасовойПояс;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЧасовойПоясКонтрагента) Тогда
				//Пробуем определить часовой пояс по адресу партнера.
				ЧасовойПоясКонтрагента = ПолучитьЧасовойПоясКонтрагента(СтрокаРезультат.Контрагент);
				
				//Пробуем определить часовой пояс для контрагента, если для партнера не удалось.
				Если ЧасовойПоясКонтрагента = неопределено Тогда
					ЧасовойПоясКонтрагента = ПолучитьЧасовойПоясКонтрагента(СтрокаРезультат.Контрагент);
				КонецЕсли;
					
			КонецЕсли;
			
			Если ЧасовойПоясКонтрагента = неопределено Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка сообщений (АИД)'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение, , , "Не удалось определить часовой пояс контрагента: " + СокрЛП(СтрокаРезультат.Контрагент));
				Продолжить;
			ИначеЕсли МассивЧПДляОтправки.Найти(ЧасовойПоясКонтрагента) = неопределено Тогда
				Продолжить;
			Конецесли;
		КонецЕсли;
		
		СтруктураПараметровСоообщения = Новый Структура(ФиксСтруктура);
		ЗаполнитьЗначенияСвойств(СтруктураПараметровСоообщения, СтрокаРезультат);
		РезультатОтправки = СформироватьИОтправитьСообщение(Выборка, СтруктураПараметровСоообщения, Новый УникальныйИдентификатор);
		
		Если РезультатОтправки.Отправлено 
			И Не ЗначениеЗаполнено(РезультатОтправки.ОписаниеОшибки) Тогда
			
			// Удаляем записи отправленных сообщений.
			НаборЗаписейСЗ = РегистрыСведений.АИД_СписокСообщений.СоздатьНаборЗаписей();
			НаборЗаписейСЗ.Отбор.Организация.Установить(СтрокаРезультат.Организация);
			НаборЗаписейСЗ.Отбор.Контрагент.Установить(СтрокаРезультат.Контрагент);
			НаборЗаписейСЗ.Отбор.ОбъектРасчетов.Установить(СтрокаРезультат.ОбъектРасчетов);
			НаборЗаписейСЗ.Отбор.ДатаСобытия.Установить(НачалоДня(ТекущаяДата()));
			НаборЗаписейСЗ.Отбор.КлючПравила.Установить(Выборка.КлючПравила);
			НаборЗаписейСЗ.Записать();
			
			Если Выборка.РазовоеУведомление Тогда 
			//	И ПараметрыОтправки.ПараметрыКоманды.Свойство("ИдентификаторРегЗадания") Тогда
				УдалитьРазовоеУведомление(Выборка);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьЧасовойПоясКонтрагента(Контрагент) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контрагент);
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ, МассивВидовКИ);
	Если ТаблицаКИ.Количество() = 1 Тогда
		Возврат ОпределитьЧасовойПоясПоАдресу(ТаблицаКИ[0].Представление);
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции


Функция ОпределитьЧасовойПоясПоАдресу(ПредставлениеАдреса)
	
	СтрокаМинус1 = "Калининградская";
	МассивМинус1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаМинус1, Символы.ПС);
	
	Для каждого Элем из МассивМинус1 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+2";
		КонецЕсли;
	КонецЦикла;
	
	Строка0 = "Адыгея
	 |Архангельская
	 |Астраханская
	 |Белгородская
	 |Брянская
	 |Владимирская
	 |Волгоградская
	 |Вологодская
	 |Воронежская
	 |Дагестан
	 |Ингушетия
	 |Ивановская
	 |Кабардино
	 |Калмыкия
	 |Карачаево
	 |Карелия
	 |Калужская
	 |Краснодарский
	 |Кировская
	 |Костромская
	 |Курская
	 |Ленинградская
	 |Липецкая
	 |Коми-Пермяцкий
	 |Коми Респ
	 |Нижегородская
	 |Ненецкий
	 |Ростовская
	 |Марий
	 |Мордовия
	 |Москва
	 |Московская
	 |Новгородская
	 |Орловская
	 |Пензенская
	 |Псковская
	 |Рязанская
	 |Саратовская
	 |Смоленская
	 |Тамбовская
	 |Тверская
	 |Мурманская	 
	 |Северная
	 |Санкт-Петербург
	 |Ставропольский	 
	 |Татарстан
	 |Тульская
	 |Ульяновская
	 |Чеченская
	 |Чувашская
	 |Ярославская
	 |Крым";
	
	Массив0 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка0, Символы.ПС);
	
	Для каждого Элем из Массив0 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+3";
		КонецЕсли;
	КонецЦикла;
		
	Строка1 ="Удмуртская
			|Самарская";
	
	Массив1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка1, Символы.ПС);
	
	Для каждого Элем из Массив1 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+4";
		КонецЕсли;
	КонецЦикла;

	Строка2 ="Башкортостан
			  |Пермская
			  |Курганская
			  |Оренбургская
			  |Свердловская
			  |Тюменская
			  |Челябинская
			  |Ханты
			  |Ямало";
	
	Массив2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка2, Символы.ПС);
	
	Для каждого Элем из Массив2 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+5";
		КонецЕсли;
	КонецЦикла;

	Строка3 = "Омская
			  |Новосибирская
			  |Томская
			  |Алтайский край
			  |Алтай";
	Массив3 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка3, Символы.ПС);
	
	Для каждого Элем из Массив3 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+6";
		КонецЕсли;
	КонецЦикла;

	Строка4 = "Красноярский
	          |Хакасия
			  |Тыва
			  |Таймырский
			  |Эвенкийский
			  |Кемеровская";
	Массив4 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка4, Символы.ПС);
	
	Для каждого Элем из Массив4 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+7";
		КонецЕсли;
	КонецЦикла;

	Строка5 = "Бурятия
			  |Усть-Ордынский 	
	          |Иркутская";
	Массив5 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка5, Символы.ПС);
	
	Для каждого Элем из Массив5 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+8";
		КонецЕсли;
	КонецЦикла;

	Строка6 =  "Амурская          
			  |Читинская
			  |Агинский
			  |Бурятский
			  |Саха";
	Массив6 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка6, Символы.ПС);
	
	Для каждого Элем из Массив6 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+9";
		КонецЕсли;
	КонецЦикла;

	Строка7 = "Приморский          
			  |Хабаровский
			  |Еврейская
			  |Сахалинская";
	Массив7 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка7, Символы.ПС);
	
	Для каждого Элем из Массив7 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+10";
		КонецЕсли;
	КонецЦикла;

	Строка8 = "Магаданская";
	Массив8 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка8, Символы.ПС);
	
	Для каждого Элем из Массив8 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+11";
		КонецЕсли;
	КонецЦикла;

	Строка9 = "Камчатская
			  |Корякский
			  |Чукотский";
	Массив9 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка9, Символы.ПС);
	
	Для каждого Элем из Массив9 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+12";
		КонецЕсли;
	КонецЦикла;
	
	Возврат неопределено;
	
КонецФункции

Функция ПолучитьМассивЧасовыхПоясовДляОтправки(ВремяНачало, ВремяКонец)
	
	ЧПДляОтправки = Новый Массив;
	
	ГодСегодня = Год(ТекущаяДатаСеанса());
	МесяцСегодня = Месяц(ТекущаяДатаСеанса());   
	ДеньСегодня = День(ТекущаяДатаСеанса());   
	
	ЧасВремяНачало = Час(ВремяНачало);
	МинутаВремяНачало = Минута(ВремяНачало);
	СекундаВремяНачало = Секунда(ВремяНачало);
	
	ДатаВремяНачалоОтправки = Дата(ГодСегодня, МесяцСегодня, ДеньСегодня, ЧасВремяНачало, МинутаВремяНачало, СекундаВремяНачало);
	
	ЧасВремяКонец = Час(ВремяКонец);
	МинутаВремяКонец = Минута(ВремяКонец);
	СекундаВремяКонец = Секунда(ВремяКонец);
	
	ДатаВремяКонецОтправки = Дата(ГодСегодня, МесяцСегодня, ДеньСегодня, ЧасВремяКонец, МинутаВремяКонец, СекундаВремяКонец);
	
	СписокЧП = ПолучитьСписокЧасовыхПоясов();
	ТекЧасовойПояс = ЧасовойПояс();
	Для каждого ЭлемЧП из СписокЧП Цикл
		Смещение = ПолучитьСмещениеДляЧасовогоПояса(ТекЧасовойПояс, ЭлемЧП.Значение);
		Если Смещение = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем текущее время со смещением.
		ВремяСоСмещением = ТекущаяДатаСеанса() + Смещение*60*60;
		
		ЧасСоСмещениение = Час(ВремяСоСмещением);
		МинутаСоСмещениение = Минута(ВремяСоСмещением);
		СекундаСоСмещениение = Секунда(ВремяСоСмещением);
		
		СегодняСоСмещением = Дата(ГодСегодня, МесяцСегодня, ДеньСегодня, ЧасСоСмещениение, МинутаСоСмещениение, СекундаСоСмещениение);
		
		// Проверям попадает ли время со смещением в наш промежуток.
		Если СегодняСоСмещением >= ДатаВремяНачалоОтправки И СегодняСоСмещением <= ДатаВремяКонецОтправки Тогда
			ЧПДляОтправки.Добавить(ЭлемЧП.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЧПДляОтправки;
	
КонецФункции

Функция ПолучитьСмещениеДляЧасовогоПояса(ЧССистемы, ЧС)
	
	Смещения = Новый Соответствие;
	Если ЧССистемы = "Europe/Moscow" Тогда
		Смещения.Вставить("GMT+2", -1);
		Смещения.Вставить("GMT+3", 0);
		Смещения.Вставить("GMT+4", 1);
		Смещения.Вставить("GMT+5", 2);
		Смещения.Вставить("GMT+6", 3);
		Смещения.Вставить("GMT+7", 4);
		Смещения.Вставить("GMT+8", 5);
		Смещения.Вставить("GMT+9", 6);
		Смещения.Вставить("GMT+10", 7);
		Смещения.Вставить("GMT+11", 8);
		Смещения.Вставить("GMT+12", 9);
	КонецЕсли;
	Возврат Смещения.Получить(ЧС);

КонецФункции

Процедура ВыполнитьОбновлениеСтатусовСообщений() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ЖурналСобытий.УникальныйКлючЗаписи КАК ИдентификаторСообщения,
	               |	АИД_ЖурналСобытий.ТипСообщения КАК ТипСообщения
	               |ИЗ
	               |	РегистрСведений.АИД_ЖурналСобытий КАК АИД_ЖурналСобытий
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(АИД_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ) = &ДатаСобытия
	               |	И АИД_ЖурналСобытий.ТипСообщения В(&ТипыСообщений)
	               |	И АИД_ЖурналСобытий.СтатусСобытия
	               |	И НЕ АИД_ЖурналСобытий.СтатусДоставки";
	Запрос.УстановитьПараметр("ДатаСобытия", НачалоДня(ТекущаяДата()));
	
	ТипыСообщений = Новый Массив;
	ТипыСообщений.Добавить(Перечисления.АИД_ТипыСообщений.SMS);
	ТипыСообщений.Добавить(Перечисления.АИД_ТипыСообщений.ГолосовоеСообщение);
	
	Запрос.УстановитьПараметр("ТипыСообщений", ТипыСообщений);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрРез из Результат Цикл
		Если СтрРез.ТипСообщения = Перечисления.АИД_ТипыСообщений.ГолосовоеСообщение Тогда
			АИД_ОтправкаГолосовойПочты.СтатусДоставки(СтрРез.ИдентификаторСообщения);
		Иначе
			АИД_ОтправкаSMS.СтатусДоставки(СтрРез.ИдентификаторСообщения);
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура УдалитьРазовоеУведомление(Правило, ИдентификаторРегламентногоЗадания = неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ИдентификаторРегламентногоЗадания <> неопределено Тогда
		РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗадания);
		
		Если РегЗадание <> неопределено Тогда
			РегЗадание.Удалить();	
		КонецЕсли;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
		Отбор.Вставить("Ключ", Правило.КлючРегламентногоЗадания);
		
		РегЗаданияПоКлючу = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		Для каждого РегЗадание из РегЗаданияПоКлючу Цикл
			РегЗадание.Удалить();	
		КонецЦикла;
	КонецЕсли;
	//Проверяем, есть ли сопряженные рег. задания по ключу.
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
	Отбор.Вставить("Ключ", Правило.КлючРегламентногоЗадания);
	
	РегЗаданияПоКлючу = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Если РегЗаданияПоКлючу.Количество() = 0 Тогда
		
		//Удаляем правило формирования разового уведомления.
		ЗаписьПравила = РегистрыСведений.АИД_ПравилаФормированияСобытий.СоздатьНаборЗаписей();
		ЗаписьПравила.Отбор.ВидДоговора.Установить(Правило.ВидДоговора);
		ЗаписьПравила.Отбор.СтатусКонтрагента.Установить(Правило.СтатусКонтрагента);
		ЗаписьПравила.Отбор.Контрагент.Установить(Правило.Контрагент);
		ЗаписьПравила.Отбор.ОбъектРасчетов.Установить(Правило.ОбъектРасчетов);
		ЗаписьПравила.Отбор.ТипСообщения.Установить(Правило.ТипСообщения);
		ЗаписьПравила.Отбор.ДеньНедели.Установить(Правило.ДеньНедели);
		ЗаписьПравила.Отбор.КоличествоДнейЗадолженности.Установить(Правило.КоличествоДнейЗадолженности);
		ЗаписьПравила.Отбор.КлючРегламентногоЗадания.Установить(Правило.КлючРегламентногоЗадания);
		
		ЗаписьПравила.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры



Функция СформироватьИОтправитьСообщение(ДанныеШаблона, ЗначенияРеквизитовСообщения, УникальныйИдентификатор)
	УстановитьПривилегированныйРежим(Истина);
	Если ДанныеШаблона.ТипСообщения = Перечисления.АИД_ТипыСообщений.Email Тогда
		ВидСообщения = "Почта";
	ИначеЕсли ДанныеШаблона.ТипСообщения = Перечисления.АИД_ТипыСообщений.SMS Тогда
		ВидСообщения = "СообщениеSMS";
	ИначеЕсли ДанныеШаблона.ТипСообщения = Перечисления.АИД_ТипыСообщений.ГолосовоеСообщение Тогда
		ВидСообщения = "ГолосовоеСообщение";
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
	ПараметрыОтправки = АИД_ШаблоныСообщенийКлиентСервер.КонструкторПараметровОтправки(ДанныеШаблона.ШаблонСообщения, Неопределено, УникальныйИдентификатор);
	ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = ВидСообщения;
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("КлючРегламентногоЗадания", ДанныеШаблона.КлючРегламентногоЗадания);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("КлючПравила", ДанныеШаблона.КлючПравила);
	
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("АИД_ЗначенияРеквизитовСообщения", ЗначенияРеквизитовСообщения);
	ПараметрыОтправки.ДополнительныеПараметры.ПреобразовыватьHTMLДляФорматированногоДокумента = Ложь;
	ПараметрыОтправки.Вставить("Валюта",ЗначенияРеквизитовСообщения.Валюта);
	ПараметрыОтправки.ДополнительныеПараметры.УчетнаяЗапись = АИД_ШаблоныСообщенийСлужебный.ПолучитьПочтовыйАдресДляОтправки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат АИД_ШаблоныСообщенийСлужебный.СформироватьСообщениеИОтправить(ПараметрыОтправки);	
	
КонецФункции

Функция ПолучитьФиксСтруктуруИзКолонокТЧ(ТабЗначений)
	
	СтруктураПараметров = Новый Структура();
	
	Для каждого Колонка из ТабЗначений.Колонки Цикл
		СтруктураПараметров.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(СтруктураПараметров);
	
КонецФункции

Функция ПолучитьТекстЗапросаДебиторскойЗадолженности(ВалютаОтчета,ДетализацияОтчета=1) Экспорт
Если ДетализацияОтчета = 1 Тогда 	
	ТекстЗапроса =  "ВЫБРАТЬ
	|	ТаблицаЗадолженности.Договор КАК Договор,
	|	ТаблицаЗадолженности.Документ КАК ОбъектРасчетов,
	|	ТаблицаЗадолженности.Документ КАК РасчетныйДокумент,
	|	ТаблицаЗадолженности.Контрагент КАК Контрагент,
	|	ТаблицаЗадолженности.Организация КАК Организация,
	|	ТаблицаЗадолженности.ОрганизацияГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация,
	|	ТаблицаЗадолженности.Подразделение КАК Подразделение,
	|	ТаблицаЗадолженности.ПросроченнаяЗадолженность КАК ПросроченнаяЗадолженность
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	&Тз КАК ТаблицаЗадолженности
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеВключатьВРассылку.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ СписокИсключений
	|ИЗ
	|	РегистрСведений.АИД_НеВключатьВРассылку КАК НеВключатьВРассылку
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс КАК Курс,
	|	КурсВалюты.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТКурсыВалюты
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних({(&ДатаОтчета)}, ) КАК КурсВалюты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсВалютыОтчета.Валюта КАК Валюта,
	|	КурсВалютыОтчета.Курс КАК Курс,
	|	КурсВалютыОтчета.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТКурсВалютыОтчета
	|ИЗ
	|	ВТКурсыВалюты КАК КурсВалютыОтчета
	|ГДЕ
	|	КурсВалютыОтчета.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТКурсыВалюты.Валюта КАК Валюта,
	|	ВТКурсыВалюты.Курс * ВТКурсВалютыОтчета.Кратность / (ВТКурсыВалюты.Кратность * ВТКурсВалютыОтчета.Кратность) КАК Коэффициент
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	ВТКурсыВалюты КАК ВТКурсыВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКурсВалютыОтчета КАК ВТКурсВалютыОтчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВТКурсыВалюты.Кратность <> 0
	|	И ВТКурсВалютыОтчета.Курс <> 0
	| ;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыПоСрокам.Организация                                     КАК Организация,
	|	РасчетыПоСрокам.Контрагент                                         КАК Контрагент,
	|	РасчетыПоСрокам.Договор                                         КАК Договор,
	|	РасчетыПоСрокам.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	РасчетыПоСрокам.Договор.ВалютаВзаиморасчетов                                         КАК Валюта,
	|	РасчетыПоСрокам.ОбъектРасчетов                              КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА РасчетыПоСрокам.Договор.УстановленСрокОплаты
	|				И РасчетыПоСрокам.Договор.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасчетыПоСрокам.Договор.ДатаОплаты
	|		КОГДА РасчетыПоСрокам.Договор.УстановленСрокОплаты
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасчетыПоСрокам.ОбъектРасчетов.Дата, ДЕНЬ), ДЕНЬ, РасчетыПоСрокам.Договор.СрокОплаты)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасчетыПоСрокам.ОбъектРасчетов.Дата, ДЕНЬ), ДЕНЬ, &ОтсрочкаПоУмолчанию)
	|	КОНЕЦ КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокам.ОбъектРасчетов.Дата                              КАК ДатаВозникновения,
	|
	|	0                         										 КАК НашДолг,
	|	РасчетыПоСрокам.ПросроченнаяЗадолженность                                КАК ДолгКлиента,
	|	РасчетыПоСрокам.ПросроченнаяЗадолженность                      КАК ДолгКлиентаПросрочено,
	|	
	|	0                                                              КАК КОтгрузке
	|ПОМЕСТИТЬ ТаблицаЗадолженностей
	|ИЗ
	|	Вт КАК РасчетыПоСрокам
	|ГДЕ
	|	 (&ВключатьЗадолженность = 0 ИЛИ &ВключатьЗадолженность = 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗадолженностей.ДатаПлановогоПогашения КАК ДатаНачала,
	|	ГрафикиРаботы.Дата КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ИЛИ ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РабочийДень
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ГрафикиРаботы
	|		ПО (ГрафикиРаботы.ПроизводственныйКалендарь = &Календарь)
	|ГДЕ
	|	ГрафикиРаботы.Дата МЕЖДУ ТаблицаЗадолженностей.ДатаПлановогоПогашения И &ДатаОтчета
	|	И ТаблицаЗадолженностей.ДатаПлановогоПогашения <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(СУММА(Графики.РабочийДень), 0) КАК КоличествоДней
	|ПОМЕСТИТЬ РазностиДат
	|ИЗ
	|	Графики КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Графики КАК Графики
	|		ПО ВложенныйЗапрос.ДатаНачала = Графики.ДатаНачала
	|			И ВложенныйЗапрос.ДатаОкончания > Графики.ДатаОкончания
	|ГДЕ
	|	ВложенныйЗапрос.ДатаОкончания = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаСостояниеВзаиморасчетов                                 КАК ГруппировкаВсего,
	|	ТаблицаЗадолженностей.Организация                              КАК Организация,
	|	ТаблицаЗадолженностей.Контрагент                                  КАК Контрагент,
	|	ТаблицаЗадолженностей.Договор                                  КАК Договор,
	|	isnull(Выразить(ТаблицаЗадолженностей.Договор КАК Справочник.ДоговорыКонтрагентов).АИД_ВидДоговора, Значение(Справочник.АИД_ВидыДоговоров.ПустаяСсылка)) КАК ВидДоговора,
	|	ТаблицаЗадолженностей.ОбъектРасчетов                           КАК ЗаказКлиента,
	|	ТаблицаЗадолженностей.Валюта                                   КАК Валюта,
	|	ТаблицаЗадолженностей.РасчетныйДокумент                        КАК РасчетныйДокумент,
	|	ТаблицаЗадолженностей.ДатаПлановогоПогашения                   КАК ДатаПлатежа,
	|	ТаблицаЗадолженностей.ДатаВозникновения                        КАК ДатаВозникновения,
	|	РАЗНОСТЬДАТ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаЗадолженностей.ДатаПлановогоПогашения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &ДатаОтчета
	|			ИНАЧЕ ТаблицаЗадолженностей.ДатаПлановогоПогашения
	|		КОНЕЦ, &ДатаОтчета, ДЕНЬ) КАК КоличествоДнейДоПлатежа,
	|	ТаблицаЗадолженностей.НашДолг                                  КАК НашДолг,
	|	ТаблицаЗадолженностей.ДолгКлиента                              КАК ДолгКлиента,
	|	ТаблицаЗадолженностей.НашДолг		                           КАК НашДолгВВалютеОтчета,
	|	ТаблицаЗадолженностей.ДолгКлиента							   КАК ДолгКлиентаВВалютеОтчета,
	|	ТаблицаЗадолженностей.КОтгрузке								   КАК КОтгрузкеВВалютеОтчета,
	|	ТаблицаЗадолженностей.ДолгКлиентаПросрочено                    КАК ДолгКлиентаПросрочено,
	|	ТаблицаЗадолженностей.ДолгКлиентаПросрочено					   КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	ТаблицаЗадолженностей.КОтгрузке                                КАК КОтгрузке,
	|	
	|	ВЫБОР
	|		КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА РазностиДат.КоличествоДней > 0
	|						ТОГДА РазностиДат.КоличествоДней
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗадолженностей.ДолгКлиента = 0 ИЛИ ТаблицаЗадолженностей.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ) > 0
	|							ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ                                                             КАК КоличествоДней,
	|	ЕСТЬNULL(Интервалы.НаименованиеИнтервала, &СтрокаДолгНеПросрочен) КАК НаименованиеИнтервала,
	|	ЕСТЬNULL(Интервалы.НомерСтроки, 0)                                КАК НомерИнтервала,
	|	ЕСТЬNULL(Интервалы.НижняяГраницаИнтервала, 0)                     КАК НижняяГраницаИнтервала,
	|   ТаблицаЗадолженностей.Контрагент.ОсновноеКонтактноеЛицо  как КонтактноеЛицо,
	|	выбор ТипЗначения(ТаблицаЗадолженностей.ОбъектРасчетов)
	|			когда Тип(Справочник.ДоговорыКонтрагентов) тогда ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			когда Тип(Документ.РеализацияТоваровУслуг) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
	|           иначе ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) конец как ДатаЗадолженности
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РазностиДат КАК РазностиДат
	|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлановогоПогашения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АИД_ВариантыКлассификацииЗадолженности.Интервалы КАК Интервалы
	|		ПО (Интервалы.Ссылка = &ВариантКлассификацииЗадолженности)
	|			И (ВЫБОР
	|				КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА РазностиДат.КоличествоДней > 0
	|								ТОГДА РазностиДат.КоличествоДней
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаЗадолженностей.ДолгКлиента = 0 ИЛИ ТаблицаЗадолженностей.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ) > 0
	|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ)
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ МЕЖДУ Интервалы.НижняяГраницаИнтервала И Интервалы.ВерхняяГраницаИнтервала)}
	|ГДЕ
	|	ТаблицаЗадолженностей.Организация В (&Организации) И ТаблицаЗадолженностей.Контрагент В (&Контрагент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.ЗаказКлиента КАК ЗаказКлиента,
	|	втИтоговыеДанные.Договор КАК Договор,
	|	втИтоговыеДанные.ВидДоговора КАК ВидДоговора,
	|	втИтоговыеДанные.Валюта КАК Валюта,
	|	втИтоговыеДанные.РасчетныйДокумент КАК РасчетныйДокумент,
	|	втИтоговыеДанные.ДатаПлатежа КАК ДатаПлатежа,
	|	втИтоговыеДанные.Контрагент КАК Контрагент,
	|	втИтоговыеДанные.Организация КАК Организация,
	|	втИтоговыеДанные.НашДолг КАК НашДолг,
	|	втИтоговыеДанные.ДолгКлиента КАК ДолгКлиента,
	|	втИтоговыеДанные.КОтгрузке КАК КОтгрузке,
	|	втИтоговыеДанные.НашДолгВВалютеОтчета КАК НашДолгВВалютеОтчета,
	|	втИтоговыеДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
	|	втИтоговыеДанные.КОтгрузкеВВалютеОтчета КАК КОтгрузкеВВалютеОтчета,
	|	втИтоговыеДанные.КоличествоДней КАК КоличествоДней,
	|	втИтоговыеДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	|	втИтоговыеДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	втИтоговыеДанные.НаименованиеИнтервала КАК ИнтервалЗадолженности,
	|	втИтоговыеДанные.НомерИнтервала КАК НомерИнтервала,
	|	втИтоговыеДанные.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	втИтоговыеДанные.КонтактноеЛицо КАК КонтактноеЛицо,
	|	втИтоговыеДанные.ДатаПлатежа КАК ДатаПлатежаПлан
	|ПОМЕСТИТЬ втИтогиДанные
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВсеДолги
	|				ТОГДА втИтоговыеДанные.ДолгКлиента > 0
	|			ИНАЧЕ втИтоговыеДанные.ДолгКлиентаПросрочено > 0
	|		КОНЕЦ
	|	И (втИтоговыеДанные.ДатаЗадолженности = ДАТАВРЕМЯ(1, 1, 1) ИЛИ втИтоговыеДанные.ДатаЗадолженности > &ДатаАктуальностиДЗ ИЛИ &ДатаАктуальностиДЗ = ДАТАВРЕМЯ(1, 1, 1)) 
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанные.ЗаказКлиента,
	|	втИтоговыеДанные.Договор,
	|	втИтоговыеДанные.ВидДоговора,
	|	втИтоговыеДанные.Валюта,
	|	втИтоговыеДанные.РасчетныйДокумент,
	|	втИтоговыеДанные.ДатаПлатежа,
	|	втИтоговыеДанные.Контрагент,
	|	втИтоговыеДанные.Организация,
	|	втИтоговыеДанные.НашДолг,
	|	втИтоговыеДанные.ДолгКлиента,
	|	втИтоговыеДанные.КОтгрузке,
	|	втИтоговыеДанные.НашДолгВВалютеОтчета,
	|	втИтоговыеДанные.ДолгКлиентаВВалютеОтчета,
	|	втИтоговыеДанные.КОтгрузкеВВалютеОтчета,
	|	втИтоговыеДанные.КоличествоДней,
	|	втИтоговыеДанные.ДолгКлиентаПросрочено,
	|	втИтоговыеДанные.ДолгКлиентаПросроченоВВалютеОтчета,
	|	втИтоговыеДанные.НаименованиеИнтервала,
	|	втИтоговыеДанные.НомерИнтервала,
	|	втИтоговыеДанные.НижняяГраницаИнтервала,
	|	втИтоговыеДанные.КонтактноеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтогиДанные.ЗаказКлиента КАК ЗаказКлиента,
	|	втИтогиДанные.Договор КАК Договор,
	|	ВЫБОР КОГДА втИтогиДанные.ВидДоговора = ЗНАЧЕНИЕ(Справочник.АИД_ВидыДоговоров.ПустаяСсылка) ТОГДА "" "" ИНАЧЕ втИтогиДанные.ВидДоговора КОНЕЦ КАК ВидДоговора,
	|	ЕСТЬNULL(втИтогиДанные.Контрагент.АИД_СтатусКонтрагента, ЗНАЧЕНИЕ(Справочник.АИД_СтатусыКонтрагентов.ПустаяСсылка)) КАК СтатусКонтрагента,
	|	втИтогиДанные.Валюта КАК Валюта,
	|	втИтогиДанные.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ЕСТЬNULL(втИтогиДанные.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПлатежа,
	|	РАЗНОСТЬДАТ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втИтогиДанные.ДатаПлатежаПлан, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &ДатаОтчета
	|			ИНАЧЕ втИтогиДанные.ДатаПлатежаПлан
	|		КОНЕЦ, &ДатаОтчета, ДЕНЬ) КАК КоличествоДнейДоПлатежа,
	|	ЕСТЬNULL(втИтогиДанные.КоличествоДней, 0) КАК КоличествоДней,
	|	втИтогиДанные.Контрагент КАК Контрагент,
	|	втИтогиДанные.Организация КАК Организация,
	|	втИтогиДанные.ДолгКлиента КАК ДолгКлиента,
	|	втИтогиДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
	|	втИтогиДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	|	втИтогиДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	втИтогиДанные.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	|	втИтогиДанные.НомерИнтервала КАК НомерИнтервала,
	|	втИтогиДанные.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	втИтогиДанные.КонтактноеЛицо КАК КонтактноеЛицо,
	|	втИтогиДанные.ДатаПлатежаПлан КАК ДатаПлатежаПлан,
	|	ВЫБОР КОГДА СписокИсключений.Контрагент ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ИсключенИзРассылки
	|ИЗ
	|	втИтогиДанные КАК втИтогиДанные
	|ЛЕВОЕ СОЕДИНЕНИЕ СписокИсключений КАК СписокИсключений
	|ПО втИтогиДанные.Контрагент = СписокИсключений.Контрагент";
	
	Возврат ТекстЗапроса;
Иначе 
	    	ТекстЗапроса =  "ВЫБРАТЬ
	|	ТаблицаЗадолженности.Договор КАК Договор,
	|	ТаблицаЗадолженности.Документ КАК ОбъектРасчетов,
	|	ТаблицаЗадолженности.Документ КАК РасчетныйДокумент,
	|	ТаблицаЗадолженности.Контрагент КАК Контрагент,
	|	ТаблицаЗадолженности.Организация КАК Организация,
	|	ТаблицаЗадолженности.ОрганизацияГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация,
	|	ТаблицаЗадолженности.Подразделение КАК Подразделение,
	|	ТаблицаЗадолженности.ПросроченнаяЗадолженность КАК ПросроченнаяЗадолженность
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	&Тз КАК ТаблицаЗадолженности
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеВключатьВРассылку.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ СписокИсключений
	|ИЗ
	|	РегистрСведений.АИД_НеВключатьВРассылку КАК НеВключатьВРассылку
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс КАК Курс,
	|	КурсВалюты.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТКурсыВалюты
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних({(&ДатаОтчета)}, ) КАК КурсВалюты
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсВалютыОтчета.Валюта КАК Валюта,
	|	КурсВалютыОтчета.Курс КАК Курс,
	|	КурсВалютыОтчета.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТКурсВалютыОтчета
	|ИЗ
	|	ВТКурсыВалюты КАК КурсВалютыОтчета
	|ГДЕ
	|	КурсВалютыОтчета.Валюта = &Валюта
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТКурсыВалюты.Валюта КАК Валюта,
	|	ВТКурсыВалюты.Курс * ВТКурсВалютыОтчета.Кратность / (ВТКурсыВалюты.Кратность * ВТКурсВалютыОтчета.Кратность) КАК Коэффициент
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	ВТКурсыВалюты КАК ВТКурсыВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКурсВалютыОтчета КАК ВТКурсВалютыОтчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВТКурсыВалюты.Кратность <> 0
	|	И ВТКурсВалютыОтчета.Курс <> 0
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыПоСрокам.Организация                                     КАК Организация,
	|	РасчетыПоСрокам.Контрагент                                         КАК Контрагент,
	|	РасчетыПоСрокам.Договор                                         КАК Договор,
	|	РасчетыПоСрокам.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	РасчетыПоСрокам.Договор.ВалютаВзаиморасчетов                                         КАК Валюта,
	|	РасчетыПоСрокам.ОбъектРасчетов                              КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА РасчетыПоСрокам.Договор.УстановленСрокОплаты
	|				И РасчетыПоСрокам.Договор.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасчетыПоСрокам.Договор.ДатаОплаты
	|		КОГДА РасчетыПоСрокам.Договор.УстановленСрокОплаты
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасчетыПоСрокам.ОбъектРасчетов.Дата, ДЕНЬ), ДЕНЬ, РасчетыПоСрокам.Договор.СрокОплаты)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасчетыПоСрокам.ОбъектРасчетов.Дата, ДЕНЬ), ДЕНЬ, &ОтсрочкаПоУмолчанию)
	|	КОНЕЦ КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокам.ОбъектРасчетов.Дата                              КАК ДатаВозникновения,
	|
	|	0                         										 КАК НашДолг,
	|	РасчетыПоСрокам.ПросроченнаяЗадолженность                                КАК ДолгКлиента,
	|	РасчетыПоСрокам.ПросроченнаяЗадолженность                      КАК ДолгКлиентаПросрочено,
	|	
	|	0                                                              КАК КОтгрузке
	|ПОМЕСТИТЬ ТаблицаЗадолженностей
	|ИЗ
	|	Вт КАК РасчетыПоСрокам
	|ГДЕ
	|	 (&ВключатьЗадолженность = 0 ИЛИ &ВключатьЗадолженность = 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗадолженностей.ДатаПлановогоПогашения КАК ДатаНачала,
	|	ГрафикиРаботы.Дата КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ИЛИ ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РабочийДень
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ГрафикиРаботы
	|		ПО (ГрафикиРаботы.ПроизводственныйКалендарь = &Календарь)
	|ГДЕ
	|	ГрафикиРаботы.Дата МЕЖДУ ТаблицаЗадолженностей.ДатаПлановогоПогашения И &ДатаОтчета
	|	И ТаблицаЗадолженностей.ДатаПлановогоПогашения <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(СУММА(Графики.РабочийДень), 0) КАК КоличествоДней
	|ПОМЕСТИТЬ РазностиДат
	|ИЗ
	|	Графики КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Графики КАК Графики
	|		ПО ВложенныйЗапрос.ДатаНачала = Графики.ДатаНачала
	|			И ВложенныйЗапрос.ДатаОкончания > Графики.ДатаОкончания
	|ГДЕ
	|	ВложенныйЗапрос.ДатаОкончания = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаСостояниеВзаиморасчетов                                 КАК ГруппировкаВсего,
	|	ТаблицаЗадолженностей.Организация                              КАК Организация,
	|	ТаблицаЗадолженностей.Контрагент                                  КАК Контрагент,
	|	ТаблицаЗадолженностей.Договор                                  КАК Договор,
	|	isnull(Выразить(ТаблицаЗадолженностей.Договор КАК Справочник.ДоговорыКонтрагентов).АИД_ВидДоговора, Значение(Справочник.АИД_ВидыДоговоров.ПустаяСсылка)) КАК ВидДоговора,
	|	ТаблицаЗадолженностей.ОбъектРасчетов                           КАК ЗаказКлиента,
	|	ТаблицаЗадолженностей.Валюта                                   КАК Валюта,
	|	ТаблицаЗадолженностей.РасчетныйДокумент                        КАК РасчетныйДокумент,
	|	ТаблицаЗадолженностей.ДатаПлановогоПогашения                   КАК ДатаПлатежа,
	|	ТаблицаЗадолженностей.ДатаВозникновения                        КАК ДатаВозникновения,
	|	РАЗНОСТЬДАТ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаЗадолженностей.ДатаПлановогоПогашения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &ДатаОтчета
	|			ИНАЧЕ ТаблицаЗадолженностей.ДатаПлановогоПогашения
	|		КОНЕЦ, &ДатаОтчета, ДЕНЬ) КАК КоличествоДнейДоПлатежа,
	|	ТаблицаЗадолженностей.НашДолг                                  КАК НашДолг,
	|	ТаблицаЗадолженностей.ДолгКлиента                              КАК ДолгКлиента,
	|	ТаблицаЗадолженностей.НашДолг		                           КАК НашДолгВВалютеОтчета,
	|	ТаблицаЗадолженностей.ДолгКлиента							   КАК ДолгКлиентаВВалютеОтчета,
	|	ТаблицаЗадолженностей.КОтгрузке								   КАК КОтгрузкеВВалютеОтчета,
	|	ТаблицаЗадолженностей.ДолгКлиентаПросрочено                    КАК ДолгКлиентаПросрочено,
	|	ТаблицаЗадолженностей.ДолгКлиентаПросрочено					   КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	ТаблицаЗадолженностей.КОтгрузке                                КАК КОтгрузке,
	|	
	|	ВЫБОР
	|		КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА РазностиДат.КоличествоДней > 0
	|						ТОГДА РазностиДат.КоличествоДней
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗадолженностей.ДолгКлиента = 0 ИЛИ ТаблицаЗадолженностей.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ) > 0
	|							ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ                                                             КАК КоличествоДней,
	|	ЕСТЬNULL(Интервалы.НаименованиеИнтервала, &СтрокаДолгНеПросрочен) КАК НаименованиеИнтервала,
	|	ЕСТЬNULL(Интервалы.НомерСтроки, 0)                                КАК НомерИнтервала,
	|	ЕСТЬNULL(Интервалы.НижняяГраницаИнтервала, 0)                     КАК НижняяГраницаИнтервала,
	|   ТаблицаЗадолженностей.Контрагент.ОсновноеКонтактноеЛицо  как КонтактноеЛицо,
	|	выбор ТипЗначения(ТаблицаЗадолженностей.ОбъектРасчетов)
	|			когда Тип(Справочник.ДоговорыКонтрагентов) тогда ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			когда Тип(Документ.РеализацияТоваровУслуг) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
	|           иначе ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) конец как ДатаЗадолженности
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РазностиДат КАК РазностиДат
	|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлановогоПогашения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АИД_ВариантыКлассификацииЗадолженности.Интервалы КАК Интервалы
	|		ПО (Интервалы.Ссылка = &ВариантКлассификацииЗадолженности)
	|			И (ВЫБОР
	|				КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА РазностиДат.КоличествоДней > 0
	|								ТОГДА РазностиДат.КоличествоДней
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаЗадолженностей.ДолгКлиента = 0 ИЛИ ТаблицаЗадолженностей.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ) > 0
	|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ)
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ МЕЖДУ Интервалы.НижняяГраницаИнтервала И Интервалы.ВерхняяГраницаИнтервала)}
	|ГДЕ
	|	ТаблицаЗадолженностей.Организация В (&Организации) И ТаблицаЗадолженностей.Контрагент В (&Контрагент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.ЗаказКлиента КАК ЗаказКлиента,
	|	втИтоговыеДанные.Договор КАК Договор,
	|	втИтоговыеДанные.ВидДоговора КАК ВидДоговора,
	|	втИтоговыеДанные.Валюта КАК Валюта,
	|	втИтоговыеДанные.РасчетныйДокумент КАК РасчетныйДокумент,
	|	втИтоговыеДанные.ДатаПлатежа КАК ДатаПлатежа,
	|	втИтоговыеДанные.Контрагент КАК Контрагент,
	|	втИтоговыеДанные.Организация КАК Организация,
	|	втИтоговыеДанные.НашДолг КАК НашДолг,
	|	втИтоговыеДанные.ДолгКлиента КАК ДолгКлиента,
	|	втИтоговыеДанные.КОтгрузке КАК КОтгрузке,
	|	втИтоговыеДанные.НашДолгВВалютеОтчета КАК НашДолгВВалютеОтчета,
	|	втИтоговыеДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
	|	втИтоговыеДанные.КОтгрузкеВВалютеОтчета КАК КОтгрузкеВВалютеОтчета,
	|	втИтоговыеДанные.КоличествоДней КАК КоличествоДней,
	|	втИтоговыеДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	|	втИтоговыеДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	втИтоговыеДанные.НаименованиеИнтервала КАК ИнтервалЗадолженности,
	|	втИтоговыеДанные.НомерИнтервала КАК НомерИнтервала,
	|	втИтоговыеДанные.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	втИтоговыеДанные.КонтактноеЛицо КАК КонтактноеЛицо,
	|	втИтоговыеДанные.ДатаПлатежа КАК ДатаПлатежаПлан
	|ПОМЕСТИТЬ втИтогиДанные
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВсеДолги
	|				ТОГДА втИтоговыеДанные.ДолгКлиента > 0
	|			ИНАЧЕ втИтоговыеДанные.ДолгКлиентаПросрочено > 0
	|		КОНЕЦ
	|	И (втИтоговыеДанные.ДатаЗадолженности = ДАТАВРЕМЯ(1, 1, 1) ИЛИ втИтоговыеДанные.ДатаЗадолженности > &ДатаАктуальностиДЗ ИЛИ &ДатаАктуальностиДЗ = ДАТАВРЕМЯ(1, 1, 1)) 
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанные.ЗаказКлиента,
	|	втИтоговыеДанные.Договор,
	|	втИтоговыеДанные.ВидДоговора,
	|	втИтоговыеДанные.Валюта,
	|	втИтоговыеДанные.РасчетныйДокумент,
	|	втИтоговыеДанные.ДатаПлатежа,
	|	втИтоговыеДанные.Контрагент,
	|	втИтоговыеДанные.Организация,
	|	втИтоговыеДанные.НашДолг,
	|	втИтоговыеДанные.ДолгКлиента,
	|	втИтоговыеДанные.КОтгрузке,
	|	втИтоговыеДанные.НашДолгВВалютеОтчета,
	|	втИтоговыеДанные.ДолгКлиентаВВалютеОтчета,
	|	втИтоговыеДанные.КОтгрузкеВВалютеОтчета,
	|	втИтоговыеДанные.КоличествоДней,
	|	втИтоговыеДанные.ДолгКлиентаПросрочено,
	|	втИтоговыеДанные.ДолгКлиентаПросроченоВВалютеОтчета,
	|	втИтоговыеДанные.НаименованиеИнтервала,
	|	втИтоговыеДанные.НомерИнтервала,
	|	втИтоговыеДанные.НижняяГраницаИнтервала,
	|	втИтоговыеДанные.КонтактноеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//|	втИтогиДанные.ЗаказКлиента КАК ЗаказКлиента,
	//|	втИтогиДанные.Договор КАК Договор,
	|	ВЫБОР КОГДА втИтогиДанные.ВидДоговора = ЗНАЧЕНИЕ(Справочник.АИД_ВидыДоговоров.ПустаяСсылка) ТОГДА "" "" ИНАЧЕ втИтогиДанные.ВидДоговора КОНЕЦ КАК ВидДоговора,
	|	ЕСТЬNULL(втИтогиДанные.Контрагент.АИД_СтатусКонтрагента, ЗНАЧЕНИЕ(Справочник.АИД_СтатусыКонтрагентов.ПустаяСсылка)) КАК СтатусКонтрагента,
	//|	втИтогиДанные.Валюта КАК Валюта,
	//|	втИтогиДанные.РасчетныйДокумент КАК РасчетныйДокумент,
	//|	ЕСТЬNULL(втИтогиДанные.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПлатежа,
	//|	РАЗНОСТЬДАТ(ВЫБОР
	//|			КОГДА ЕСТЬNULL(втИтогиДанные.ДатаПлатежаПлан, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	//|				ТОГДА &ДатаОтчета
	//|			ИНАЧЕ втИтогиДанные.ДатаПлатежаПлан
	//|		КОНЕЦ, &ДатаОтчета, ДЕНЬ) КАК КоличествоДнейДоПлатежа,
	|	ЕСТЬNULL(втИтогиДанные.КоличествоДней, 0) КАК КоличествоДней,
	|	втИтогиДанные.Контрагент КАК Контрагент,
	|	втИтогиДанные.Организация КАК Организация,
	|	втИтогиДанные.ДолгКлиента КАК ДолгКлиента,
	|	втИтогиДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
	|	втИтогиДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	|	втИтогиДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	втИтогиДанные.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	//|	втИтогиДанные.НомерИнтервала КАК НомерИнтервала,
	//|	втИтогиДанные.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	втИтогиДанные.КонтактноеЛицо КАК КонтактноеЛицо
//	|	втИтогиДанные.ДатаПлатежаПлан КАК ДатаПлатежаПлан,
//	|	ВЫБОР КОГДА СписокИсключений.Контрагент ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ИсключенИзРассылки
	|ИЗ
	|	втИтогиДанные КАК втИтогиДанные
	|ЛЕВОЕ СОЕДИНЕНИЕ СписокИсключений КАК СписокИсключений
	|ПО втИтогиДанные.Контрагент = СписокИсключений.Контрагент";
	
	Возврат ТекстЗапроса;
КонецЕсли;

КонецФункции

Функция ПолучитьТипыДокументовПлана()
	
	ТекстТиповДокументов = ""; 
	
	
	//ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаказКлиента), ";
	//ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента), ";
	//ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ГрафикИсполненияДоговора)";
	//
	//Возврат ТекстТиповДокументов;
	//
КонецФункции

Функция ПолучитьПараметрыДебиторскойЗадолженностиПоУмолчанию() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Сутки", 24*60*60);
	СтруктураПараметров.Вставить("ДатаОтчета", ТекущаяДата());
	СтруктураПараметров.Вставить("ДанныеОтчета", 1);
	СтруктураПараметров.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	СтруктураПараметров.Вставить("ВсеДолги", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	АИД_ВариантыКлассификацииЗадолженности.Ссылка КАК Ссылка,
		|	АИД_ВариантыКлассификацииЗадолженности.Календарь КАК Календарь
		|ИЗ
		|	Справочник.АИД_ВариантыКлассификацииЗадолженности КАК АИД_ВариантыКлассификацииЗадолженности
		|ГДЕ
		|	НЕ АИД_ВариантыКлассификацииЗадолженности.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В системе не указаны варианты классификации задолженности.");
	иначе	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураПараметров.Вставить("ВариантКлассификации", Выборка.Ссылка);
		СтруктураПараметров.Вставить("Календарь", Выборка.Календарь);
		СтруктураПараметров.Вставить("ВариантКлассификацииВыбор", Выборка.Количество() > 1);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДатаАктуальностиРасчетов",ТекущаяДата());
	
	Возврат СтруктураПараметров;
	
КонецФункции

//Функция НачалоРасчетов(КонецРасчета, АналитикиКРасчету = Неопределено, РасчетКВосстановлению = Неопределено, НомерЗадания = Неопределено) Экспорт
//	
//	Если АналитикиКРасчету = Неопределено Тогда
//		АналитикиКРасчету = АналитикиРасчета();
//	КонецЕсли;
//	
//	Если РасчетКВосстановлению = "РасчетыСКлиентами" Тогда
//		НомерЗадания = ?(ЗначениеЗаполнено(НомерЗадания), НомерЗадания, Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить());
//		ГраницаРасчетовСКлиентами = НачалоРасчета("ЗаданияКРаспределениюРасчетовСКлиентами", КонецРасчета, АналитикиКРасчету, НомерЗадания);
//		ГраницаРасчетовСПоставщиками = Дата("39991212");
//	ИначеЕсли РасчетКВосстановлению = "РасчетыСПоставщиками" Тогда
//		НомерЗадания = ?(ЗначениеЗаполнено(НомерЗадания), НомерЗадания, Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить());
//		ГраницаРасчетовСПоставщиками = НачалоРасчета("ЗаданияКРаспределениюРасчетовСПоставщиками", КонецРасчета, АналитикиКРасчету, НомерЗадания);
//		ГраницаРасчетовСКлиентами = Дата("39991212");
//	Иначе
//		НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
//		ГраницаРасчетовСКлиентами = НачалоРасчета("ЗаданияКРаспределениюРасчетовСКлиентами", КонецРасчета, АналитикиКРасчету, НомерЗадания);
//		НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
//		ГраницаРасчетовСПоставщиками = НачалоРасчета("ЗаданияКРаспределениюРасчетовСПоставщиками", КонецРасчета, АналитикиКРасчету, НомерЗадания);
//	КонецЕсли;
//	
//	Если Мин(ГраницаРасчетовСКлиентами, ГраницаРасчетовСПоставщиками) < КонецРасчета Тогда
//		ГраницаРасчетов = Мин(ГраницаРасчетовСКлиентами, ГраницаРасчетовСПоставщиками);
//	Иначе
//		ГраницаРасчетов = Неопределено;
//	КонецЕсли;
//	Возврат ГраницаРасчетов;
//КонецФункции

Функция ПолучитьВнешнююОбработкуРеглЗадания(Знач Организация = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	//можно отобрать параметры именно для конкретной орг-ции (на будущее)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	АИД_Настройки.ВнешняяОбработка КАК ВнешняяОбработка,
		|	1 КАК Приоритет
		|ИЗ
		|	РегистрСведений.АИД_Настройки КАК АИД_Настройки
		//|ГДЕ
		//|	удз_Настройки.Организация = &Организация
		|ГДЕ
		|	НЕ АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АИД_Настройки.ВнешняяОбработка,
		|	2
		|ИЗ
		|	РегистрСведений.АИД_Настройки КАК АИД_Настройки
		|ГДЕ
		|	АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") тогда	
		Запрос.УстановитьПараметр("Организация", Организация);
	иначе
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ВнешняяОбработка; 
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат неопределено;
	
КонецФункции

Функция СоздатьРегламентноеЗаданиеПоПравилу(Правило) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	ВнешняяОбработкаРеглЗадания = АИД_ОбщегоНазначенияПереопределяемый.ПолучитьВнешнююОбработкуРеглЗадания();
	
	// Создаем новое регламентное задание.
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Если НЕ Правило.УчитыватьЧасовойПояс Тогда 
		Расписание.ВремяНачала 	= Правило.ВремяНачала;
		Расписание.ВремяКонца 	= Правило.ВремяКонца;
	Иначе
		Расписание.ПериодПовтораВТечениеДня = 3600; //30 минут
	КонецЕсли;
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(Правило.ДеньНедели);
	
	Расписание.ДниНедели         = ДниНедели;
	Расписание.ПериодПовтораДней = 1; // каждый день
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);

	ПараметрыЗадания.Вставить("Наименование", лев("Аид" + " (" + СформироватьНаименованиеРегЗаданияПоПравилу(Правило) + ")",127));
	ПараметрыЗадания.Вставить("ИмяМетода", МетаданныеОсновногоЗадания.ИмяМетода);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", Правило.Ключ);
		
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеОсновногоЗадания);
		
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("ИдентификаторКоманды", "АИД_ВыполнениеОтправкиСообщений");
	СтруктураКоманды.Вставить("ПараметрыКоманды", Новый Структура("КлючРегЗадания, УчитыватьЧасовойПояс, ВремяНачала, ВремяКонца", Правило.Ключ, Правило.УчитыватьЧасовойПояс, Правило.ВремяНачала, Правило.ВремяКонца));
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ВнешняяОбработкаРеглЗадания);
	МассивПараметров.Добавить(СтруктураКоманды);
		
	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
	НовоеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	//Добавляем в параметры команды еще и идентификатор регламентного задания
	НовоеЗадание.Параметры[1].ПараметрыКоманды.Вставить("ИдентификаторРегЗадания", НовоеЗадание.УникальныйИдентификатор);
	НовоеЗадание.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовоеЗадание;
	
КонецФункции

Функция СформироватьНаименованиеРегЗаданияПоПравилу(Правило)
	
	УстановитьПривилегированныйРежим(Истина);
	Наименование = "";
	Для каждого ЭлемПравила из Правило Цикл
		Если ЭлемПравила.Ключ = "Ключ" Или ЭлемПравила.Ключ = "КлючПравила" Тогда
			Продолжить;
		ИначеЕсли ЭлемПравила.Ключ = "ВремяНачала" Или ЭлемПравила.Ключ = "ВремяКонца" Тогда
			Значение = Формат(ЭлемПравила.Значение, "ДФ=""ЧЧ:мм:сс""");	
		ИначеЕсли ЭлемПравила.Ключ = "Контрагент" Тогда
			Значение = Лев(ЭлемПравила.Значение.Наименование,30);
		Иначе
			Значение = ЭлемПравила.Значение;
		КонецЕсли;
		
		Наименование = Наименование + ?(ЗначениеЗаполнено(Наименование), ",", "") + Значение;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	//в sql поле description имеет ограничение 128 символов
	Если СтрДлина(Наименование) > 127 тогда
		Наименование = Лев(СокрЛП(Наименование), 127);
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Процедура УдалитьРегламентноеЗаданиеПоПравилу(Правило) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	ОтборРЗ = Новый Структура("Ключ, Метаданные", Правило.Ключ, МетаданныеОсновногоЗадания);
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
	Для каждого РЗ из МассивРЗ Цикл
		РЗ.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалениеРегламентныхЗаданийАИД(МассивКлючей = неопределено) Экспорт
	
	
	УдалитьРегламентноеЗаданиеЗаполненияЗадолженности();
	УдалитьРегламентноеЗаданиеОбновленияСтатусов();
	
	ПравилаФормированияРЗ = ПолучитьПравилаФормированияРЗ(МассивКлючей);
	
	//По каждому правилу ищем регл. задания и удаляем их.
	Для каждого Правило из ПравилаФормированияРЗ Цикл
		УдалитьРегламентноеЗаданиеПоПравилу(Правило);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапускРегламентныхЗаданийАИД(МассивКлючей = неопределено) Экспорт
	
	СоздатьРегламентноеЗаданиеЗаполненияЗадолженности(Ложь);
	
	СоздатьРегламентноеЗаданиеОбновленияСтатусов(Ложь);	
	
	ПравилаФормированияРЗ = ПолучитьПравилаФормированияРЗ(МассивКлючей);
	
	//Удаляем все существующие правила по ключам.
	Для каждого Правило из ПравилаФормированияРЗ Цикл
		УдалитьРегламентноеЗаданиеПоПравилу(Правило);
	КонецЦикла;
	
	//Для каждого правила формируем отдельное регл. задание.
	Для каждого Правило из ПравилаФормированияРЗ Цикл
		СоздатьРегламентноеЗаданиеПоПравилу(Правило);		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьРегламентноеЗаданиеЗаполненияЗадолженности(УдалитьПередСозданием = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	Если УдалитьПередСозданием Тогда
		УдалитьРегламентноеЗаданиеЗаполненияЗадолженности();
	Иначе
		ОтборРЗ = Новый Структура("Ключ, Метаданные", "АИД_ЗаполнениеСпискаЗадолженности", МетаданныеОсновногоЗадания);
		МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
		Если МассивРЗ.Количество() > 0 Тогда
			Возврат МассивРЗ[0];
		КонецЕсли;
	КонецЕсли;
	
	ВнешняяОбработкаРеглЗадания = АИД_ОбщегоНазначенияПереопределяемый.ПолучитьВнешнююОбработкуРеглЗадания();
	НастройкаРЗ = НастройкиРегЗаданий();
	
	// Создаем новое регламентное задание.
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала 	= НастройкаРЗ.ВремяНачалаЗаполненияЗадолженности;
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание.ДниНедели = ДниНедели;
	Расписание.ПериодПовтораДней = 1; // каждый день
		
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);

	ПараметрыЗадания.Вставить("Наименование", "Аид" + " (Заполнение списка задолженности)");
	ПараметрыЗадания.Вставить("ИмяМетода", МетаданныеОсновногоЗадания.ИмяМетода);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", "АИД_ЗаполнениеСпискаЗадолженности");
		
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеОсновногоЗадания);
		
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("ИдентификаторКоманды", "АИД_ЗаполнениеСпискаЗадолженности");
	СтруктураКоманды.Вставить("ПараметрыКоманды", Новый Структура("КлючРегЗадания", "АИД_ЗаполнениеСпискаЗадолженности"));
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ВнешняяОбработкаРеглЗадания);
	МассивПараметров.Добавить(СтруктураКоманды);
		
	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
	НовоеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовоеЗадание;
	
КонецФункции

Процедура УдалитьРегламентноеЗаданиеЗаполненияЗадолженности()
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	ОтборРЗ = Новый Структура("Ключ, Метаданные", "АИД_ЗаполнениеСпискаЗадолженности", МетаданныеОсновногоЗадания);
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
	Для каждого РЗ из МассивРЗ Цикл
		РЗ.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СоздатьРегламентноеЗаданиеОбновленияСтатусов(УдалитьПередСозданием = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	Если УдалитьПередСозданием Тогда
		УдалитьРегламентноеЗаданиеОбновленияСтатусов();
	Иначе
		ОтборРЗ = Новый Структура("Ключ, Метаданные", "АИД_ОбновлениеСтатусовСообщений", МетаданныеОсновногоЗадания);
		МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
		Если МассивРЗ.Количество() > 0 Тогда
			Возврат МассивРЗ[0];
		КонецЕсли;
	КонецЕсли;
	
	ВнешняяОбработкаРеглЗадания = АИД_ОбщегоНазначенияПереопределяемый.ПолучитьВнешнююОбработкуРеглЗадания();
	УстановитьПривилегированныйРежим(Истина);
	НастройкаРЗ = НастройкиРегЗаданий();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Создаем новое регламентное задание.
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала 	= НастройкаРЗ.ВремяНачалаОбновленияСтатусов;
	Расписание.ВремяКонца 	= НастройкаРЗ.ВремяОкончанияОбновленияСтатусов;
	Расписание.ПериодПовтораВТечениеДня = НастройкаРЗ.ИнтервалОбновленияСтатусов;
	
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание.ДниНедели = ДниНедели;
	Расписание.ПериодПовтораДней = 1; // каждый день
		
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);

	ПараметрыЗадания.Вставить("Наименование", "Аид" + " (ОбновлениеСтатусовСообщений)");
	ПараметрыЗадания.Вставить("ИмяМетода", МетаданныеОсновногоЗадания.ИмяМетода);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", "АИД_ОбновлениеСтатусовСообщений");
		
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеОсновногоЗадания);
		
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("ИдентификаторКоманды", "АИД_ОбновлениеСтатусовСообщений");
	СтруктураКоманды.Вставить("ПараметрыКоманды", Новый Структура("КлючРегЗадания", "АИД_ОбновлениеСтатусовСообщений"));
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ВнешняяОбработкаРеглЗадания);
	МассивПараметров.Добавить(СтруктураКоманды);
		
	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
	НовоеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовоеЗадание;
	
КонецФункции

Процедура УдалитьРегламентноеЗаданиеОбновленияСтатусов()
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	ОтборРЗ = Новый Структура("Ключ, Метаданные", "АИД_ОбновлениеСтатусовСообщений", МетаданныеОсновногоЗадания);
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
	Для каждого РЗ из МассивРЗ Цикл
		РЗ.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет правильность сохраненных настроек формирования рег.задания для заполнения задолженности.
//
// Возвращаемое значение:
//  Булево - Истина, если настройка произведена.
Функция НастройкаРегЗаданийВыполнена(Знач Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкаРЗ = НастройкиРегЗаданий(Организация);
	УстановитьПривилегированныйРежим(Ложь);
	
	Отказ = Ложь;
	Для Каждого Поле Из НастройкаРЗ Цикл
		Если Не ЗначениеЗаполнено(Поле.Значение) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Не Отказ;
	
КонецФункции

Функция НастройкиРегЗаданий(Знач Организация = Неопределено) Экспорт
	
	Результат = Новый Структура("ВремяНачалаЗаполненияЗадолженности, ВнешняяОбработка, 
								|ИнтервалОбновленияСтатусов, ВремяНачалаОбновленияСтатусов, ВремяОкончанияОбновленияСтатусов");
	
	УстановитьПривилегированныйРежим(Истина);
	//можно отобрать параметры именно для конкретной орг-ции (на будущее)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	АИД_Настройки.ВнешняяОбработка КАК ВнешняяОбработка,
		|	АИД_Настройки.ВремяНачалаЗаполненияЗадолженности КАК ВремяНачалаЗаполненияЗадолженности,
		|	АИД_Настройки.ИнтервалОбновленияСтатусов КАК ИнтервалОбновленияСтатусов,
		|	АИД_Настройки.ВремяНачалаОбновленияСтатусов КАК ВремяНачалаОбновленияСтатусов,
		|	АИД_Настройки.ВремяОкончанияОбновленияСтатусов КАК ВремяОкончанияОбновленияСтатусов,
		|	1 КАК Приоритет
		|ИЗ
		|	РегистрСведений.АИД_Настройки КАК АИД_Настройки
		|ГДЕ
		|	НЕ АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АИД_Настройки.ВнешняяОбработка,
		|	АИД_Настройки.ВремяНачалаЗаполненияЗадолженности,
		|	АИД_Настройки.ИнтервалОбновленияСтатусов,
		|	АИД_Настройки.ВремяНачалаОбновленияСтатусов,
		|	АИД_Настройки.ВремяОкончанияОбновленияСтатусов,
		|	2
		|ИЗ
		|	РегистрСведений.АИД_Настройки КАК АИД_Настройки
		|ГДЕ
		|	АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") тогда	
		Запрос.УстановитьПараметр("Организация", Организация);
	иначе
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПравилаФормированияРЗ(МассивКлючей = неопределено) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	МассивПравилФормированияРЗ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ПравилаФормированияСобытий.Контрагент КАК Контрагент,
	               |	АИД_ПравилаФормированияСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	               |	АИД_ПравилаФормированияСобытий.ВидДоговора КАК ВидДоговора,
	               |	АИД_ПравилаФормированияСобытий.СтатусКонтрагента КАК СтатусКонтрагента,
	               |	АИД_ПравилаФормированияСобытий.ТипСообщения КАК ТипСообщения,
	               |	АИД_ПравилаФормированияСобытий.ВремяНачала КАК ВремяНачала,
	               |	АИД_ПравилаФормированияСобытий.ВремяОкончания КАК ВремяКонца,
	               |	АИД_ПравилаФормированияСобытий.ИнтервалСообщений КАК ИнтервалСообщений,
	               |	АИД_ПравилаФормированияСобытий.КоличествоПовторов КАК КоличествоПовторов,
	               |	АИД_ПравилаФормированияСобытий.УчитыватьЧасовойПояс КАК УчитыватьЧасовойПояс,
	               |	АИД_ПравилаФормированияСобытий.КлючРегламентногоЗадания КАК Ключ,
	               |	АИД_ПравилаФормированияСобытий.КлючПравила КАК КлючПравила,
	               |	АИД_ПравилаФормированияСобытий.ДеньНедели КАК ДеньНедели
	               |ИЗ
	               |	РегистрСведений.АИД_ПравилаФормированияСобытий КАК АИД_ПравилаФормированияСобытий
				   |";	
	
	Если Не МассивКлючей = неопределено Тогда
		Запрос.УстановитьПараметр("МассивКлючей", МассивКлючей);
		Запрос.Текст = Запрос.Текст + "ГДЕ АИД_ПравилаФормированияСобытий.КлючРегламентногоЗадания В (&МассивКлючей)";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ФиксСтруктура = ПолучитьФиксСтруктуруИзКолонокТЧ(Результат);
	
	// Вспомагательная фиксирования структура.
	Для каждого СтрРез из Результат Цикл
		
		Если Не ЗначениеЗаполнено(СтрРез.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ПравилоФормированияРЗ = Новый Структура(ФиксСтруктура);
		ЗаполнитьЗначенияСвойств(ПравилоФормированияРЗ, СтрРез);
		МассивПравилФормированияРЗ.Добавить(ПравилоФормированияРЗ);
		
		//Для каждого повтора создаем свое регл. задание со смещением по времени.
		//Ключ оставляем тот же.
		Если СтрРез.КоличествоПовторов > 0 Тогда
			Для к = 1 по СтрРез.КоличествоПовторов Цикл
				ПравилоФормированияРЗ = Новый Структура(ФиксСтруктура);
				ЗаполнитьЗначенияСвойств(ПравилоФормированияРЗ, СтрРез);
				ПравилоФормированияРЗ.Ключ = СтрРез.Ключ;
				ПравилоФормированияРЗ.КлючПравила = СтрРез.КлючПравила;
				ПравилоФормированияРЗ.ВремяНачала = СтрРез.ВремяНачала + к*СтрРез.ИнтервалСообщений;
				ПравилоФормированияРЗ.ВремяКонца = СтрРез.ВремяКонца + к*СтрРез.ИнтервалСообщений;
				ПравилоФормированияРЗ.ДеньНедели = СтрРез.ДеньНедели;
				МассивПравилФормированияРЗ.Добавить(ПравилоФормированияРЗ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивПравилФормированияРЗ;
	
КонецФункции

Функция ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо)
	УстановитьПривилегированныйРежим(Истина);
	
	Ответ  = новый Структура("Почта, Телефон", "", "");
	Запрос = Новый Запрос;

	//Установка значений параметров
	Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);

	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК ВидКИ,
	               |	ЕСТЬNULL(КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Представление, """") КАК ЗначениеКИ
	               |ИЗ
	               |	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтрагентовКонтактнаяИнформация
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтактныеЛица)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2,
	               |	ЕСТЬNULL(КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Представление, """")
	               |ИЗ
	               |	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтрагентовКонтактнаяИнформация
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	3,
	               |	ЕСТЬNULL(КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Представление, """")
	               |ИЗ
	               |	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтрагентовКонтактнаяИнформация
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица)";

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		ЕстьМобильныйТелефон = Ложь;
		пока Выборка.Следующий() Цикл
			Если Выборка.ВидКИ = 1 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Почта", Выборка.ЗначениеКИ);
			ИначеЕсли Выборка.ВидКИ = 2 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
				ЕстьМобильныйТелефон = Истина;
			ИначеЕсли Не ЕстьМобильныйТелефон и Выборка.ВидКИ = 3 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьДанныеКИКонтрагента(Контрагент)
	
	УстановитьПривилегированныйРежим(Истина);
	Ответ  = новый Структура("Почта, Телефон", "", "");
	Запрос = Новый Запрос;

	//Установка значений параметров
	Запрос.УстановитьПараметр("Ссылка", Контрагент);

	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК ВидКИ,
	               |	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление, """") КАК ЗначениеКИ
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагенты)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2,
	               |	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление, """")
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)";

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		ЕстьМобильныйТелефон = Ложь;
		пока Выборка.Следующий() Цикл
			Если Выборка.ВидКИ = 1 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Почта", Выборка.ЗначениеКИ);
			ИначеЕсли Выборка.ВидКИ = 2 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

Процедура ВключитьКонтрагентаВРассылку(Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.АИД_НеВключатьВРассылку.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

Процедура ИсключитьКонтрагентаИзРассылки(Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.АИД_НеВключатьВРассылку.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Контрагент = Контрагент;
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьМассивКлючейРЗ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	МассивКлючейРЗ = Новый Массив;

	Если ЕстьРегламентноеЗаданиеПоКлючу("АИД_ЗаполнениеСпискаЗадолженности") Тогда
		МассивКлючейРЗ.Добавить("АИД_ЗаполнениеСпискаЗадолженности");
	КонецЕсли;
	
	Если ЕстьРегламентноеЗаданиеПоКлючу("АИД_ОбновлениеСтатусовСообщений") Тогда
		МассивКлючейРЗ.Добавить("АИД_ОбновлениеСтатусовСообщений");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ПравилаФормированияСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания
	               |ИЗ
	               |	РегистрСведений.АИД_ПравилаФормированияСобытий КАК АИД_ПравилаФормированияСобытий";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если ЕстьРегламентноеЗаданиеПоКлючу(СокрЛП(Результат.КлючРегламентногоЗадания)) Тогда
			МассивКлючейРЗ.Добавить(СокрЛП(Результат.КлючРегламентногоЗадания));
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат МассивКлючейРЗ;
КонецФункции

Функция ЕстьРегламентноеЗаданиеПоКлючу(КлючРЗ)
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	ОтборРЗ = Новый Структура("Ключ, Метаданные", КлючРЗ, МетаданныеОсновногоЗадания);
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивРЗ.Количество() > 0;
	
КонецФункции

Процедура ОбновитьСтатусДоставкиСообщения(ТипСообщения, ИдентификаторСообщения, СтатусДоставки, ТекстОшибкиДоставки, ТекстДиалога = неопределено, ФайлОтветов = неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АИД_ЖурналСобытий.Контрагент КАК Контрагент,
	               |	АИД_ЖурналСобытий.ДатаВремяСобытия КАК ДатаВремяСобытия,
	               |	АИД_ЖурналСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	               |	АИД_ЖурналСобытий.УникальныйКлючЗаписи КАК УникальныйКлючЗаписи,
	               |	АИД_ЖурналСобытий.ТипСообщения КАК ТипСообщения,
	               |	АИД_ЖурналСобытий.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	АИД_ЖурналСобытий.Телефон КАК Телефон,
	               |	АИД_ЖурналСобытий.Почта КАК Почта,
	               |	АИД_ЖурналСобытий.СтатусСобытия КАК СтатусСобытия,
	               |	АИД_ЖурналСобытий.ТекстСообщения КАК ТекстСообщения,
	               |	АИД_ЖурналСобытий.ТекстОшибки КАК ТекстОшибки,
	               |	АИД_ЖурналСобытий.СтатусДоставки КАК СтатусДоставки,
	               |	АИД_ЖурналСобытий.ТекстОшибкиДоставки КАК ТекстОшибкиДоставки,
	               |	АИД_ЖурналСобытий.ТекстДиалога КАК ТекстДиалога,
	               |	АИД_ЖурналСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	               |	АИД_ЖурналСобытий.КлючПравила КАК КлючПравила,
				   |	АИД_ЖурналСобытий.РасчетныйДокумент КАК РасчетныйДокумент,
				   |	АИД_ЖурналСобытий.Сумма КАК Сумма
		           |ИЗ
	               |	РегистрСведений.АИД_ЖурналСобытий КАК АИД_ЖурналСобытий
	               |ГДЕ
	               |	АИД_ЖурналСобытий.ТипСообщения = &ТипСообщения
	               |	И АИД_ЖурналСобытий.УникальныйКлючЗаписи = &УникальныйКлючЗаписи";
	
	Запрос.УстановитьПараметр("ТипСообщения", ТипСообщения);
	Запрос.УстановитьПараметр("УникальныйКлючЗаписи", ИдентификаторСообщения);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	//Нас интересует только одна запись.
	//Иначе - ошибка записи.
	Если Результат.Количество() = 1 Тогда
		ЗаписьСобытия = РегистрыСведений.АИД_ЖурналСобытий.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьСобытия, Результат[0]);
		ЗаписьСобытия.СтатусДоставки = СтатусДоставки;
		ЗаписьСобытия.ТекстОшибкиДоставки = ТекстОшибкиДоставки;
		Если ТекстДиалога <> неопределено Тогда
			ЗаписьСобытия.ТекстДиалога = ТекстДиалога;
		КонецЕсли;
		
		Если ФайлОтветов <> неопределено Тогда
			ЗаписьСобытия.АдресФайла = ФайлОтветов;
		КонецЕсли;
		
		Попытка 
			ЗаписьСобытия.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление статуса доставки'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		КонецПопытки;
	ИначеЕсли Результат.Количество() > 1 Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось обновить статус доставки сообщения (тип: ""%1"", id: ""%2""):
			|по id сообщения найдено несколько записей в журнале событий!'"), ТипСообщения, ИдентификаторСообщения);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление статуса доставки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// отправляет письмо на внутренний ящик
Функция ПолучитьПомощь(Текст, Тема) Экспорт
	
	Организация = "";
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	Организации.Наименование КАК Наименование,
	                      |	Организации.ИНН КАК ИНН
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		Организация = Организация + Выборка.Наименование + " " + Выборка.ИНН + "; ";
	КонецЦикла;
	
	Пользователь = ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо), ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо.Наименование, ПараметрыСеанса.ТекущийПользователь.Наименование);
	//ТекстСообщения = "<em>Лид от организаций:</em><br>" + Организация + "<br>Текст обращения: <br>" 
	//					+ СтрЗаменить(Текст, Символы.ПС, "<br>") + "<br><br>Контактное лицо: " + Пользователь;
	
	НастройкиОтправкиSMS = АИД_ОтправкаSMS.НастройкиОтправкиSMS();
	ТекстСообщения = "<em>Лид от организаций:</em><br>" + Организация + "<br>" 
						+ СтрЗаменить(Текст, Символы.ПС, "<br>") + "<br><br>Пользователь ПО: " + Пользователь + "<br><br>Ключ БС: "+ НастройкиОтправкиSMS.КлючБС;

																	
	ОтправитьПисьмо("aid.support@businesstech.store", "X6qKzedoy", 
						"465", "smtp.yandex.ru", "aid.support@businesstech.store", 
						"CRM", ТекстСообщения, 
						Тема, "");
	
КонецФункции

Функция ОтправитьПисьмо(EmailОтправителя, ПарольОтправителя, 
						Порт, АдресСервера, EmailПолучателя, 
						ИмяПолучателя, ТекстСообщения, 
						ЗаголовокСообщения, МассивФайловыхПутей)
						
	//ПОЧТОВЫЙ ПРОФИЛЬ
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.ИспользоватьSSLSMTP = истина;
	Профиль.АдресСервераSMTP = АдресСервера; 
	Профиль.ПортSMTP = Порт;
	Профиль.Пользователь = EmailОтправителя;
	Профиль.Пароль = ПарольОтправителя;
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.ПарольSMTP = ПарольОтправителя;
	Профиль.ПользовательSMTP = EmailОтправителя; 
   
	//ПОЧТОВОЕ СООБЩЕНИЕ
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.Отправитель = EmailОтправителя;
	Сообщение.Тема = ЗаголовокСообщения;
	Сообщение.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.HTML);
	Сообщение.Организация = "The company";		
	Адрес = Сообщение.Получатели.Добавить(EmailПолучателя);
	Адрес.ОтображаемоеИмя = ИмяПолучателя;
	
	//Для каждого ПутьКФайлу Из МассивФайловыхПутей Цикл
	//	Сообщение.Вложения.Добавить(ПутьКФайлу);
	//КонецЦикла; 
	
	// ПОЧТОВЫЙ СЕРВЕР
	
	Почта = Новый ИнтернетПочта();
	
	//Подключение к серверу
	Попытка
		Почта.Подключиться(Профиль);
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка при отправке запроса. Позвоните на номер 8 (499) 647-43-06";
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	//Отправка письма
	Попытка
		Почта.Послать(Сообщение);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Письмо успешно отправлено";
		СообщениеПользователю.Сообщить();
	Исключение
		Почта.Отключиться();      
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка при отправке запроса. Позвоните на номер 8 (499) 647-43-06";
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	Почта.Отключиться();
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДатуАктуальностиДЗ() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	        |	АИД_ДатаАктуальностиДЗ.ДатаАктуальностиДЗ КАК ДатаАктуальностиДЗ
	        |ИЗ
	        |	РегистрСведений.АИД_ДатаАктуальностиДЗ КАК АИД_ДатаАктуальностиДЗ
	        |ГДЕ
	        |	АИД_ДатаАктуальностиДЗ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ДатаАктуальностиДЗ;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Дата(1, 1, 1);
	
КонецФункции

Функция ПолучитьОрганизацииДЗ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивОрганизаций = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Организации.Ссылка КАК Организация
	               |ИЗ
	               |	РегистрСведений.АИД_Настройки КАК АИД_Настройки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АИД_Настройки.Организация
	               |ИЗ
	               |	РегистрСведений.АИД_Настройки КАК АИД_Настройки
				   |ГДЕ
	               |	НЕ АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				   |";
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаРез из Результат Цикл
		МассивОрганизаций.Добавить(СтрокаРез.Организация);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивОрганизаций;
	
КонецФункции

Функция ПолучитьСписокЧасовыхПоясов() Экспорт
	
	СписокЧП = Новый СписокЗначений;
	СписокЧП.Добавить("GMT+2", "UTC+2:00 (MSK-1)");    
	СписокЧП.Добавить("GMT+3", "UTC+3:00 (MSK)");     
	СписокЧП.Добавить("GMT+4", "UTC+4:00 (MSK+1)");
	СписокЧП.Добавить("GMT+5", "UTC+5:00 (MSK+2)");
	СписокЧП.Добавить("GMT+6", "UTC+6:00 (MSK+3)");
	СписокЧП.Добавить("GMT+7", "UTC+7:00 (MSK+4)");
	СписокЧП.Добавить("GMT+8", "UTC+8:00 (MSK+5)");
	СписокЧП.Добавить("GMT+9", "UTC+9:00 (MSK+6)");
	СписокЧП.Добавить("GMT+10", "UTC+10:00 (MSK+10)");
	СписокЧП.Добавить("GMT+11", "UTC+11:00 (MSK+11)");
	СписокЧП.Добавить("GMT+12", "UTC+12:00 (MSK+12)");
	
	Возврат СписокЧП; 
	
КонецФункции

Функция ПолучитьНастройкуЗадолженности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	АИД_Настройки.ВключатьЗадолженность КАК ВключатьЗадолженность
	|ИЗ
	|	РегистрСведений.АИД_Настройки КАК АИД_Настройки
	|";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ВключатьЗадолженность;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Процедура УдалениеСпискаСообщенийАИД(Результат) Экспорт 
	Для каждого Стр Из Результат Цикл
		Рег = РегистрыСведений.АИД_СписокСообщений.СоздатьНаборЗаписей();
		Рег.Отбор.КлючПравила.Установить(Стр.КлючПравила);
		рег.Прочитать();
		рег.Очистить();
		рег.Записать();
	КонецЦикла;	
КонецПроцедуры

Процедура УдалениеПравилФормированияСобытийАИД(Результат) Экспорт 
	Для каждого Стр Из Результат Цикл
		Рег = РегистрыСведений.АИД_ПравилаФормированияСобытий.СоздатьНаборЗаписей();
		Рег.Отбор.КлючПравила.Установить(Стр.КлючПравила);
		рег.Прочитать();
		рег.Очистить();
		рег.Записать();
	КонецЦикла;	
КонецПроцедуры
