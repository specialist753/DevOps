// Отправляет SMS через настроенного поставщика услуги, возвращает идентификатор сообщения.
//
// Параметры:
//  НомераПолучателей  - Массив - массив строк номеров получателей в формате +7ХХХХХХХХХХ;
//  Текст              - Строка - текст сообщения, максимальная длина у операторов может быть разной;
//  ИмяОтправителя     - Строка - имя отправителя, которое будет отображаться вместо номера у получателей;
//  ПеревестиВТранслит - Булево - Истина, если требуется переводить текст сообщения в транслит перед отправкой.
//
// Возвращаемое значение:
//  Структура - результат отправки:
//    * ОтправленныеСообщения - Массив - массив структур:
//      ** НомерПолучателя - Строка - номер получателя SMS.
//      ** ИдентификаторСообщения - Строка - идентификатор SMS, присвоенный провайдером для отслеживания доставки.
//    * ОписаниеОшибки - Строка - пользовательское представление ошибки, если пустая строка, то ошибки нет.
//
Функция ОтправитьSMS(НомераПолучателей, Знач Текст, ИмяОтправителя = Неопределено, ПеревестиВТранслит = Ложь) Экспорт
	
	//ПроверитьПрава(); //пока не  проверяем
	
	Результат = Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Новый Массив, "");
	
	Если Не ЗначениеЗаполнено(СтрСоединить(НомераПолучателей, "")) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не указан номер получателя SMS.'");
		Возврат Результат;
	КонецЕсли;
	
	Если ПеревестиВТранслит Тогда
		Текст = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Текст);
	КонецЕсли;
	
	//Костя
	Если Не НастройкаОтправкиSMSВыполнена() Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверно заданы настройки провайдера для отправки SMS.'");
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиSMS = НастройкиОтправкиSMS();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИмяОтправителя = Неопределено Тогда
		ИмяОтправителя = НастройкиОтправкиSMS.ИмяОтправителяSMS;
	КонецЕсли;
	
	//Костя
	Логин = "webservice";
	Пароль = "*5leAeqE}Y"; 
	ПутьКСерверу = "cloud1.businesstech.store/aid_database"; 
	
	//ПутьКСерверу = "msk.tab-is.ru/aid_database";
	ПутьКСервису = "/hs/AID_API/w1/SmsSettings";
	
	//передача параметров
	СтруктураПараметров = Новый Структура;	
	СтруктураПараметров.Вставить("keyBS",НастройкиОтправкиSMS.КлючБС);
	СтруктураПараметров.Вставить("ИмяМетода","SmsSettings"); //Руслан
	
	ЗаписьJSON = Новый ЗаписьJSON;		
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураПараметров);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	//Руслан 20.12.2021 {
	ПроксиАИД = WSСсылки.Аид_WSСсылка2.СоздатьWSПрокси("https://cloud1.businesstech.store/", "АИД", "АИДSoap");  //
	ПроксиАИД.Пользователь = Логин;
	ПроксиАИД.Пароль = Пароль;
	//}Руслан 20.12.2021
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ТелоЗапроса = ПроксиАИД.method(СтрокаJSON);	//Руслан 20.12.2021

	//выполнение веб-запроса
	//HTTPСоединение = Новый HTTPСоединение(ПутьКСерверу,,Логин,Пароль,,,Новый ЗащищенноеСоединениеOpenSSL);	
	//HTTPЗапрос = Новый HTTPЗапрос(ПутьКСервису);
	//HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);	
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
	//
	////Чтение результатов запроса		
	//ТелоЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	//Попытка
		НастройкиОтправкиSMS = ПрочитатьJSON(ЧтениеJSON);	
	//Исключение
	//	Сообщить(ТелоЗапроса);
	//КонецПопытки;

	
	//МодульОтправкаSMSЧерезПровайдера = АИД_ОтправкаSMS.МодульОтправкаSMSЧерезПровайдера(НастройкиОтправкиSMS.ПровайдерSMS);
	//Костя
	МодульОтправкаSMSЧерезПровайдера = АИД_ОтправкаSMS.МодульОтправкаSMSЧерезПровайдера(Перечисления.ПровайдерыSMS[СтрЗаменить(НастройкиОтправкиSMS.ПровайдерSMS, ".", "")]);
	//*************
	Если МодульОтправкаSMSЧерезПровайдера <> Неопределено Тогда
		Логин = "";
		Пароль = "";
		//Если НастройкиОтправкиSMS.СпособАвторизацииSMS <> "ПоКлючу" Тогда
		//	Логин = НастройкиОтправкиSMS.ЛогинДляОтправкиSMS;
		//	Пароль = НастройкиОтправкиSMS.ПарольДляОтправкиSMS;
		//Иначе
		//	Пароль = НастройкиОтправкиSMS.ПарольДляОтправкиSMS;
		//КонецЕсли;
		Результат = МодульОтправкаSMSЧерезПровайдера.ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль, НастройкиОтправкиSMS.СпособАвторизацииSMS);
	Иначе
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("НомераПолучателей", НомераПолучателей);
		ПараметрыОтправки.Вставить("Текст", Текст);
		ПараметрыОтправки.Вставить("ИмяОтправителя", ИмяОтправителя);
		ПараметрыОтправки.Вставить("Логин", НастройкиОтправкиSMS.ЛогинДляОтправкиSMS);
		ПараметрыОтправки.Вставить("Пароль", НастройкиОтправкиSMS.ПарольДляОтправкиSMS);
		ПараметрыОтправки.Вставить("Провайдер", НастройкиОтправкиSMS.ПровайдерSMS);
		
		ОтправкаSMSПереопределяемый.ОтправитьSMS(ПараметрыОтправки, Результат);
		
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОтправкаSMSПереопределяемый.ОтправитьSMS", "Результат", Результат,
			Тип("Структура"), Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Тип("Массив"), Тип("Строка")));
			
		Если Не ЗначениеЗаполнено(Результат.ОписаниеОшибки) И Не ЗначениеЗаполнено(Результат.ОтправленныеСообщения) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выходе из процедуры ОтправкаSMSПереопределяемый.ОтправитьSMS:
					|Не заполнены выходные параметры ОписаниеОшибки и ОтправленныеСообщения (провайдер: %1).
					|Ожидается заполнение по меньшей мере одного из этих параметров.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					НастройкиОтправкиSMS.Провайдер);
		КонецЕсли;
		
		Если Результат.ОтправленныеСообщения.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.Проверить(
				ТипЗнч(Результат.ОтправленныеСообщения[0]) = Тип("Структура"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип значения в коллекции Результат.ОтправленныеСообщения:
						|ожидается тип ""Структура"", передан тип ""%1""'"),
						ТипЗнч(Результат.ОтправленныеСообщения[0])),
				"ОтправкаSMSПереопределяемый.ОтправитьSMS");
			Для Индекс = 0 По Результат.ОтправленныеСообщения.Количество() - 1 Цикл
				ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
					"ОтправкаSMSПереопределяемый.ОтправитьSMS",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Результат.ОтправленныеСообщения[%1]", Формат(Индекс, "ЧН=; ЧГ=0")),
					Результат.ОтправленныеСообщения[Индекс],
					Тип("Структура"),
					Новый Структура("НомерПолучателя,ИдентификаторСообщения", Тип("Строка"), Тип("Строка")));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запрашивает статус доставки сообщения у поставщика услуг.
//
// Параметры:
//  ИдентификаторСообщения - Строка - идентификатор, присвоенный SMS при отправке;
//
// Возвращаемое значение:
//  Строка - статус доставки сообщения, который вернул поставщик услуг:
//           "НеОтправлялось" - сообщение еще не было обработано поставщиком услуг (в очереди);
//           "Отправляется"   - сообщение стоит в очереди на отправку у провайдера;
//           "Отправлено"     - сообщение отправлено, ожидается подтверждение о доставке;
//           "НеОтправлено"   - сообщение не отправлено (недостаточно средств на счете, перегружена сеть оператора);
//           "Доставлено"     - сообщение доставлено адресату;
//           "НеДоставлено"   - сообщение не удалось доставить (абонент недоступен, время ожидания подтверждения
//                              доставки от абонента истекло);
//           "Ошибка"         - не удалось получить статус у поставщика услуг (статус неизвестен).
//
Функция СтатусДоставки(Знач ИдентификаторСообщения) Экспорт
	
	Если ПустаяСтрока(ИдентификаторСообщения) Тогда
		Возврат "НеОтправлялось";
	КонецЕсли;
	
	Результат = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиSMS = НастройкиОтправкиSMS();
	УстановитьПривилегированныйРежим(Ложь);
	
	//Костя
	Логин = "webservice";
	Пароль = "*5leAeqE}Y";
	ПутьКСерверу = "cloud1.businesstech.store/aid_database"; 
	//ПутьКСерверу = "msk.tab-is.ru/aid_database";
	
	ПутьКСервису = "/hs/AID_API/w1/SmsSettings";
	
	//передача параметров
	СтруктураПараметров = Новый Структура;	
	СтруктураПараметров.Вставить("keyBS",НастройкиОтправкиSMS.КлючБС);
	СтруктураПараметров.Вставить("ИмяМетода","SmsSettings"); //Руслан
	
	ЗаписьJSON = Новый ЗаписьJSON;		
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураПараметров);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	//выполнение веб-запроса
	//HTTPСоединение = Новый HTTPСоединение(ПутьКСерверу,,Логин,Пароль,,,Новый ЗащищенноеСоединениеOpenSSL);	
	//HTTPЗапрос = Новый HTTPЗапрос(ПутьКСервису);
	//HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);	
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
	ПроксиАИД = WSСсылки.Аид_WSСсылка2.СоздатьWSПрокси("https://cloud1.businesstech.store/", "АИД", "АИДSoap");  //
	ПроксиАИД.Пользователь = Логин;
	ПроксиАИД.Пароль = Пароль;
	//}Руслан 20.12.2021
	ТелоЗапроса = ПроксиАИД.method(СтрокаJSON);	//Руслан 20.12.2021
	//Чтение результатов запроса		
	//ТелоЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	Попытка
		НастройкиОтправкиSMS = ПрочитатьJSON(ЧтениеJSON);	
	Исключение
		Сообщить(ТелоЗапроса);
	КонецПопытки;
	
	//МодульОтправкаSMSЧерезПровайдера = МодульОтправкаSMSЧерезПровайдера(НастройкиОтправкиSMS.ПровайдерSMS);
	МодульОтправкаSMSЧерезПровайдера = АИД_ОтправкаSMS.МодульОтправкаSMSЧерезПровайдера(Перечисления.ПровайдерыSMS[СтрЗаменить(НастройкиОтправкиSMS.ПровайдерSMS, ".", "")]);
	//*************
	Если МодульОтправкаSMSЧерезПровайдера <> Неопределено Тогда
		Результат = МодульОтправкаSMSЧерезПровайдера.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS);
	Иначе // провайдер не выбран
		Результат = "Ошибка";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет правильность сохраненных настроек отправки SMS.
//
// Возвращаемое значение:
//  Булево - Истина, если отправка SMS уже настроена.
Функция НастройкаОтправкиSMSВыполнена(Знач Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиSMS = НастройкиОтправкиSMS(Организация);
	УстановитьПривилегированныйРежим(Ложь);
	
	//Если ЗначениеЗаполнено(НастройкиОтправкиSMS.ПровайдерSMS) Тогда
	//
	//	НастройкиПровайдера = АИД_ОтправкаSMS.НастройкиПровайдера(НастройкиОтправкиSMS.ПровайдерSMS);
	//	
	//	ПоляАвторизации = СпособыАвторизацииПровайдераПоУмолчанию().ПоЛогинуИПаролю;
	//	Если НастройкиОтправкиSMS.Свойство("СпособАвторизацииSMS") И ЗначениеЗаполнено(НастройкиОтправкиSMS.СпособАвторизацииSMS)
	//		И НастройкиПровайдера.СпособыАвторизации.Свойство(НастройкиОтправкиSMS.СпособАвторизацииSMS) Тогда
	//		
	//		ПоляАвторизации = НастройкиПровайдера.СпособыАвторизации[НастройкиОтправкиSMS.СпособАвторизацииSMS];
	//	КонецЕсли;
	//	
	//	Отказ = Ложь;
	//	Для Каждого Поле Из ПоляАвторизации Цикл
	//		мПоле = Поле.Значение + "ДляОтправкиSMS";
	//		Если Не ЗначениеЗаполнено(НастройкиОтправкиSMS[мПоле]) Тогда
	//			Отказ = Истина;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	//не нужно пока
	//	//ОтправкаSMSПереопределяемый.ПриПроверкеНастроекОтправкиSMS(НастройкиОтправкиSMS, Отказ);
	//	Возврат Не Отказ;
	//КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиОтправкиSMS.КлючБС) Тогда
		 Отказ = Ложь;
		Возврат Не Отказ;
	КонецЕсли;
	
	
	Возврат Ложь;
	
КонецФункции

Функция НастройкиОтправкиSMS(Знач Организация = Неопределено) Экспорт
	
	Результат = Новый Структура("ЛогинДляОтправкиSMS,ПарольДляОтправкиSMS,ПровайдерSMS,ИмяОтправителяSMS,СпособАвторизацииSMS,КлючБС");
	
	//можно отобрать параметры именно для конкретной орг-ции (на будущее)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	АИД_Настройки.ЛогинДляОтправкиSMS КАК ЛогинДляОтправкиSMS,
		|	АИД_Настройки.ПарольДляОтправкиSMS КАК ПарольДляОтправкиSMS,
		|	АИД_Настройки.ПровайдерSMS КАК ПровайдерSMS,
		|	АИД_Настройки.СпособАвторизацииSMS КАК СпособАвторизацииSMS,
		|	АИД_Настройки.ИмяОтправителяSMS КАК ИмяОтправителяSMS,
		|	1 КАК Приоритет,
		|	АИД_Настройки.КлючБС КАК КлючБС
		|ИЗ
		|	РегистрСведений.АИД_Настройки КАК АИД_Настройки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АИД_Настройки.ЛогинДляОтправкиSMS,
		|	АИД_Настройки.ПарольДляОтправкиSMS,
		|	АИД_Настройки.ПровайдерSMS,
		|	АИД_Настройки.СпособАвторизацииSMS,
		|	АИД_Настройки.ИмяОтправителяSMS,
		|	2,
		|	АИД_Настройки.КлючБС
		|ИЗ
		|	РегистрСведений.АИД_Настройки КАК АИД_Настройки
		|ГДЕ
		|	АИД_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") тогда	
		Запрос.УстановитьПараметр("Организация", Организация);
	иначе
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СпособыАвторизацииПровайдераПоУмолчанию()
	
	СпособыАвторизации = Новый Структура;
	
	ПоляАвторизации = Новый СписокЗначений;
	ПоляАвторизации.Добавить("Логин", НСтр("ru = 'Логин'"));
	ПоляАвторизации.Добавить("Пароль", НСтр("ru = 'Пароль'"), Истина);
	
	СпособыАвторизации.Вставить("ПоЛогинуИПаролю", ПоляАвторизации);
	
	Возврат СпособыАвторизации;
	
КонецФункции

Функция НастройкиПровайдераПоУмолчанию()
	
	Результат = Новый Структура;
	Результат.Вставить("ПриОпределенииСпособовАвторизации", Ложь);
	Результат.Вставить("АдресОписанияУслугиВИнтернете", "");
	Результат.Вставить("СпособыАвторизации", СпособыАвторизацииПровайдераПоУмолчанию());
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиПровайдера(Провайдер) Экспорт
	
	НастройкиПровайдера = НастройкиПровайдераПоУмолчанию();
	МодульОтправкаSMSЧерезПровайдера = МодульОтправкаSMSЧерезПровайдера(Провайдер);
	
	Если МодульОтправкаSMSЧерезПровайдера <> Неопределено Тогда
		МодульОтправкаSMSЧерезПровайдера.ПриОпределенииНастроек(НастройкиПровайдера);
		Если НастройкиПровайдера.ПриОпределенииСпособовАвторизации Тогда
			МодульОтправкаSMSЧерезПровайдера.ПриОпределенииСпособовАвторизации(НастройкиПровайдера.СпособыАвторизации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиПровайдера;
	
КонецФункции

Функция МодульОтправкаSMSЧерезПровайдера(Провайдер) Экспорт
	Возврат МодулиПровайдеров()[Провайдер];
КонецФункции

Функция МодулиПровайдеров()
	Результат = Новый Соответствие;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Перечисления.ПровайдерыSMS.ЗначенияПеречисления Цикл
		ИмяМодуля = "АИД_ОтправкаSMSЧерез" + ОбъектМетаданных.Имя;
		Если Метаданные.ОбщиеМодули.Найти(ИмяМодуля) <> Неопределено Тогда
			Результат.Вставить(Перечисления.ПровайдерыSMS[ОбъектМетаданных.Имя], ОбщегоНазначения.ОбщийМодуль(ИмяМодуля));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПодготовитьHTTPЗапрос(АдресРесурса, ПараметрыЗапроса, ПоместитьПараметрыВТелоЗапроса = Истина) Экспорт
	
	Заголовки = Новый Соответствие;
	
	Если ПоместитьПараметрыВТелоЗапроса Тогда
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиSMS = НастройкиОтправкиSMS();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НастройкиОтправкиSMS.СпособАвторизацииSMS = "ПоКлючу" Тогда
		Заголовки.Вставить("Authorization", "Basic" + " " + "TVNLX3RjaGJzczpqdTg3WUd5eQ==");//НастройкиОтправкиSMS.ПарольДляОтправкиSMS);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Строка") Тогда
		СтрокаПараметров = ПараметрыЗапроса;
	Иначе
		СписокПараметров = Новый Массив;
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Значения = Параметр.Значение;
			Если ТипЗнч(Параметр.Значение) <> Тип("Массив") Тогда
				Значения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметр.Значение);
			КонецЕсли;
			
			Для Каждого Значение Из Значения Цикл
				СписокПараметров.Добавить(Параметр.Ключ + "=" + КодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL));
			КонецЦикла;
		КонецЦикла;
		СтрокаПараметров = СтрСоединить(СписокПараметров, "&");
	КонецЕсли;
	
	Если Не ПоместитьПараметрыВТелоЗапроса Тогда
		АдресРесурса = АдресРесурса + "?" + СтрокаПараметров;
	КонецЕсли;

	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ПоместитьПараметрыВТелоЗапроса Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
	КонецЕсли;
	
	Возврат HTTPЗапрос;

КонецФункции